/**
 * @file util方法，业务无关
 */

/**
 * 计算耗时
 */
exports.benchmarkUtil = function (title) {
    var me = this;
    var start = Date.now();
    var itemNum = 0;
    var items = [];
    function showTxt(itemTitle, startTime) {
        var endTime = Date.now();
        var range = endTime - startTime;
        var endTxt;
        if (range > 1000) {
            endTxt = (range / 1000).toFixed(2) + 's';
        } else {
            endTxt = range + 'ms';
        }
        return me.padMiddle(itemTitle, endTxt, 30);
    }
    // 同步异步都有，通过isToggle决定最后输出
    var isToggle = false;
    return {
        init: function (itemTile) {
            var itemStart = Date.now();
            itemNum++;
            return function () {
                itemNum--;
                items.push(showTxt(itemTile, itemStart));
                if (!itemNum && isToggle) {
                    items.push(showTxt(title, start));
                    items.forEach(function (item) {
                        console.log(item);
                    });
                    items.length = 0;
                    isToggle = false;
                }
            };
        },
        isToggle: function () {
            isToggle = true;
        }
    };
};

/**
 * 计算耗时
 */
exports.benchmark = function (title) {
    var me = this;
    var start = Date.now();
    return function () {
        var end = Date.now();
        var range = end - start;
        var endTxt;
        if (range > 1000) {
            endTxt = (range / 1000).toFixed(2) + 's';
        } else {
            endTxt = range + 'ms';
        }
        console.log(me.padMiddle(title, endTxt, 30));
    };
};

/**
 * 给指定长度字符串中间加入padString
 * @params {string} beginTxt 开始字符串，默认
 * @params {string} bendTxt  结尾字符串
 * @params {number} targetLength 字符串总长度
 * @params {string} beginTxt 开始字符串
 * @return {string} 处理后的字符串
 */
exports.padMiddle = function (beginTxt, endTxt, targetLength, padString) {
    beginTxt = beginTxt === undefined ? '' : beginTxt;
    endTxt = endTxt === undefined ? '' : endTxt;
    padString = padString === undefined ? ' ' : padString;
    if (endTxt.length + beginTxt.length >= targetLength) {
        return beginTxt + endTxt;
    }
    var padLen = [];
    padLen.length = targetLength - endTxt.length - beginTxt.length + 1;
    return beginTxt + padLen.join(padString) + endTxt;
};

/**
 * 给指定长度字符串中间加入padString
 * @params {string} target 要处理字符串，默认
 * @params {number} targetLength 字符串总长度
 * @params {string} padString 开始字符串
 * @return {string} 处理后的字符串
 */
exports.padStart = function (target, targetLength, padString) {
    target = target === undefined ? '' : target;
    padString = padString === undefined ? ' ' : padString;
    if (target.length >= targetLength) {
        return target;
    }
    var padLen = [];
    padLen.length = targetLength - target.length + 1;
    return padLen.join(padString) + target;
};

// 是否是对象
exports.isObject = function (target) {
    return Object.prototype.toString.call(target) === '[object Object]';
};

function extend(target, source) {
    if (!source) {
        return target;
    }
    Object.keys(source).forEach(function (key) {
        if ((exports.isObject(source[key]) || Array.isArray(source[key]))) {
            if (exports.isObject(source[key]) && !exports.isObject(target[key])) {
                target[key] = {};
            }
            if (Array.isArray(source[key]) && !Array.isArray(target[key])) {
                target[key] = [];
            }
            extend(target[key], source[key]);
        } else if (source[key] !== undefined) {
            target[key] = source[key];
        }
    });
}

/**
 * 继承，模拟$.extend深度拷贝，替代Object.assign，后者浅拷贝
 */
exports.extend = function (target) {
    var args = [].slice.call(arguments, 1);
    
    args.forEach(function (arg) {
        extend(target, arg);
    });
    return target;
};

/**
 * 将二维对象copy至需要的对象中进行处理
 * @params {object} originObject 原始对象
 * @params {object} cpObject 要拷贝的对象
 */
exports.deepCopy = function (originObject, cpObject) {
    if (typeof cpObject !== 'object') {
        return;
    }

    for (var src in cpObject) {
        if (cpObject.hasOwnProperty(src)) {
            // 遍历一遍
            var tempObj = cpObject[src];
            if (!originObject[src]) {
                originObject[src] = {};
            }
            for (var oSrc in tempObj) {
                if (tempObj.hasOwnProperty(oSrc) && originObject[src][oSrc] !== tempObj[oSrc]) {
                    originObject[src][oSrc] = tempObj[oSrc];
                }
            }
        }
    }
};