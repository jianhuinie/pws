/**
 * @file 构建入口
 * @date 15/11/27.
 */
const path = require('path');
const cp = require('child_process');
const exec = cp.exec;
const fs = require('fs');

const util = require('./tool/util');
const biz = require('./tool/biz');
const writeTask = require('./tasks/write');
const other = require('./builder/other');
const font = require('./builder/font');
const css = require('./builder/css');
const js = require('./builder/js');
const tpl = require('./builder/tpl');
const html = require('./builder/html');
const image = require('./builder/image');
const comUtil = require('./util');
const config = require('./config');
const changeFile = require('./tool/changeFile');
var childProcess;

// 全量构建，删除output目录，全部重新生成
function delOutput(cb) {
    const baseUrl = process.cwd();
    exec('rm -rf ' + path.join(baseUrl, '/output'), function (e) {
        if (e) {
            throw new Error(e);
        } else {
            cb && cb();
        }
    });
}

function buildAll(changeFiles) {
    /*
     * 执行步骤
     * other 输出，如.swf
     *
     * font 输出
     *
     * CSS
     * 1.编译，并将编译后的内容，添加树结点,图片替换
     * 2.压缩，生成MD5，生成配置文件｛原文件：MD5号｝写文件到发布目录
     *
     * JS
     * 2.重命名：require文件地址替换，require.getImage图片地址替换,AMD
     * 3.require插件实现，将插件转为JS文件，依赖于CSS编译后的树结点content，AMD
     * 4.树结点与插件的esprima压缩，转为JS原文件，生成MD5，生成配置文件｛原文件：MD5号｝写文件到发布目录
     *
     * HTML
     * 4.根据CSS配置替换CSS,根据JS配置文件替换JS，写文件到发布目录
     *
     * 5.IMAGE
     * 根据image配置上传图片，
     *
     * */
    const allBhk = comUtil.benchmarkUtil('Total:');

    const fontBhk = allBhk.init('font:');
    font.build();
    fontBhk();

    if (config.args.total === 0) {}
    else {
        console.log('css begin:');
    }
    const cssBhk = allBhk.init('css:');
    css.build(changeFiles, function () {
        cssBhk();

        if (changeFiles) {
            tpl.build(changeFiles);
        }
        console.log('js begin:');
        const jsBhk = allBhk.init('js total:');
        js.build(changeFiles);
        jsBhk();
        
        const htmlBhk = allBhk.init('html:');
        html.build(changeFiles, function () {
            // console.log(1);
            htmlBhk();
        });
        
        // allBhk();
        const imgBhk = allBhk.init('image:');
        image.build(function () {
            allBhk.isToggle();
            imgBhk();
            childProcess && childProcess.send({
                error: 0
            });
        });

        const otherBhk = allBhk.init('other:');
        other.build();
        otherBhk();
    });
}

function backUpManifest() {
    var manifestContent;
    var manifestPath;
    function geneManifest() {
        if (config.args.total) {
            return;
        }
        if (!fs.existsSync(manifestPath)) {
            childProcess.send({
                error: 1
            });
        }
    }
    process.on('exit', function () {
        geneManifest();
    });
    process.on('uncaughtException', function () {
        geneManifest();
        setTimeout(function () {
            process.exit(1);
        }, 100);
    });
    try {
        manifestPath = path.join(config.releaseDir.js.root, biz.getReleaseName(config.manifest));
        manifestContent = fs.readFileSync(manifestPath, 'utf-8');
        util.cache.set('manifest', config.manifest, manifestContent);
        // 增量异常manifest.js文件丢失，影响下次构建
        childProcess = cp.fork(path.join(path.dirname(__dirname), '/build/tool/errorHandler.js'));
        childProcess.send({
            manifestPath: manifestPath,
            manifestContent: manifestContent
        });
    } catch (e) {
        console.error('增量构建没有获取到manifest信息，读取路径：' + manifestPath);
        throw new Error('增量构建没有获取到manifest信息，读取路径：' + manifestPath);
    }
}
exports.build = function () {
    console.log('静态资源开始构建：');
    try {
        if (config.args.total === 1) {
            delOutput(buildAll);
            return;
        }
        backUpManifest();
        changeFile(function (files) {
            if (files && !files.delFiles.length && !files.uptFiles.length) {
                childProcess && childProcess.send({
                    error: 0
                });
                console.log('增量构建，没有检测到任何文件变化!');
                return;
            }
            delOutput(function () {
                buildAll(files);
            });
        }, function (err) {
            throw new Error(err);
        });
    } catch (e) {
        util.errorHandler(e);
    }
};