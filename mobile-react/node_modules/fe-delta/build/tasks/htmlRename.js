/**
 * Created by bjhl on 15/11/27.
 */
const util = require('../tool/util');
const biz = require('../tool/biz');
const cssTask = require('./cssResolve');
const config = require('../config');
const feTree = require('../tool/feTree');
const writeTask = require('../tasks/write');
const generateTask = require('../tasks/generate');

var htmlRules = {
    require_to_url: /require\.toUrl\(\s*['"][^'"]+['"]\s*\)/gi,
    // href: /href=['"](?:[^'"]+\.(?:ico|css|less|styl|sass)(?:\?.+)?)['"]/gi,
    // hurry: 处理href="http://m-test-live.gsxservice.com/asset/playback/main.css" rel="stylesheet" type="text/css"
    href: /href=['"](?:[^'"]+\.(?:ico|css|less|styl|sass)(?:\?\S+)?)['"]/gi,
    src: /src=['"][^'"]+['"]/gi,
    file: /file=['"][^'"]+['"]/gi,
    // require: /require\s*?\(\s*?(\[?[^{}\]]+\]?)/ig,
    require: /require\s*?\(\s*?(\[?[^{}\]]+\]?)/ig,
    // require: /require\s*?\(\s*(\[?[^{}\]]+\]?)/ig,
    url: /url\(\s*?['"]?((?:[^'")]+))['"]?\s*?\)/g

    // page_module: /\$page_module\s*=\s*['"][^'"]+['"]/gi,
    // module_name: /module_name\s*=\s*['"][^'"]+['"]/gi,
    // script_path: /\$script_path\s*=\s*['"][^'"]+['"]/gi,
    // g_modules: /\$g_modules\[\]\s*=\s*['"][^'"]+['"]/gi
};

const rulesMatch = function (result) {
    const terms = result.split(/['"]/);

    if (terms.length === 3) {
        return terms[1];
    }

    if (/^\s*require/ig.test(result)) {
        return result
            .replace(/require\s*?\(\s*?/, '')
            .replace(/\s*?[\]\[]\s*?/ig, '');
    }
    return false;
};

const clearEmptyLabel = function (content) {
    // 删除base下的manifest标签
    const reg = /<script\s*label-del=['"]+true['"]+[^\>]*>[\s\S\n]*?<\/script>/gi;
    return content.replace(reg, '');
};

const replaceContent = function (pathName, content) {
    content = clearEmptyLabel(content);

    // 替换文件中的script标签
    util.each(htmlRules, function (reg, key) {
        content = content.replace(reg, function (value, $0) {
            var fileName = rulesMatch(value);
            // 支持url(http)这种格式，而不是强制要求url('http')这种带单引号或者双引号的;
            if (key === 'url') {
                fileName = $0;
            }
            if (util.isFilterPath(fileName)) {
                return value;
            }
            if (config.htmlRenameRules && config.htmlRenameRules.isExcludeRule && config.htmlRenameRules.isExcludeRule(fileName || value)) {
                return value;
            }
            // if (!fileName) {
            //     console.log(pathName);
            //     console.log(fileName || value);
            //     console.log(value);
            // }
            var name = fileNameFilter[key] && fileNameFilter[key](pathName, fileName);
            // 替换值
            if (key === 'require_to_url') {
                if (util.isLocal() || biz.loadImage.isWhiteList(pathName, fileName)) {
                    return value.replace(fileName, name);
                }
                // flash
                if (util.isSwf(name)) {
                    return value.replace(fileName, name);
                }

                // mp3
                if (util.isMp3(name)) {
                    return value.replace(fileName, name);
                }

                return '"' + name + '"';
            }
            // 替换require.toUrl
            return value.replace(fileName, name);
        });
    });

    // 替换文件中的script标签
    if (!config.htmlRenameRules) {
        return content;
    }
    util.each(config.htmlRenameRules.requireRules, function (reg, key) {
        content = content.replace(reg, function (value) {
            var fileName = rulesMatch(value);
            if (util.isFilterPath(fileName)) {
                return value;
            };

            var name = fileNameFilter.require(pathName, fileName);
            return value.replace(fileName, name);
        });
    });
    return content;
};

var fileNameFilter = {
    html: function (pathName, fileName) {
        if (biz.isFileExist(pathName, fileName)) {
            var releaseName = biz.getReleaseName(pathName, fileName);
            if (util.isHtml(fileName) || util.isTpl(fileName)) {
                return releaseName;
            }
            
            var md5Name;
            try {
                md5Name = biz.getReleaseMd5Name(releaseName);
            } catch (e) {
                // 获取md5失败，重新生成
                if (config.args.total !== 0) {
                    return;
                }
                if (util.isCss(fileName)) {
                    // 增量，依赖的css无操作
                    // 例如：web-fe/view/org/index.html中对src/css/org/goldIndex.less的引用
                    cssTask.cssResolve([pathName], util.fixPath(fileName), null, true);
                    md5Name = biz.getReleaseMd5Name(releaseName);
                }
                if (util.isJs(fileName) && util.isJsMD5InPath(fileName)) {
                    // 增量，依赖的js无操作
                    var rootName = biz.getRootName(pathName, fileName);
                    var amd = feTree.dependencyMap[rootName].amd || {};
                    // 将esprima转成压缩后的JS文件，并返回内容
                    const minjs = generateTask.generate(amd.ast);
                    releaseName = biz.getReleaseName(pathName, fileName);
                    // 将pathname改为发布后的带MD5的文件路径，并将内容发布到当前路径下
                    md5Name = biz.getReleaseMd5Name(releaseName, minjs);
                    writeTask.write(md5Name, minjs);
                }
            }
            
            return md5Name;
        }
        // 有可能是这种格式：{{$jssdk_origin}}/whiteboard/whiteboard.css，其他服务器地址
        return fileName;
    },
    image: function (pathName, fileName) {
        if (util.isImage(fileName)) {
            return biz.loadImage.getName(pathName, fileName);
        }

        if (util.isFont(fileName) || util.isSwf(fileName)) {
            return biz.addRootPath(biz.getReleaseMd5Name(biz.getReleaseName(pathName, fileName)));
        }
        return false;
    },
    href: function (pathName, fileName) {
        // 支持shortcut
        if (util.isImage(fileName)) {
            return this.image(pathName, fileName);
        }
        return this.html(pathName, fileName);
    },
    // page_module: function (pathName, fileName) {
    //     return this.require(pathName, fileName);
    // },
    // module_name: function (pathName, fileName) {
    //     return this.require(pathName, fileName);
    // },
    // script_path: function (pathName, fileName) {
    //     return this.require(pathName, fileName);
    // },
    src: function (pathName, fileName) {
        if (util.isImage(fileName)) {
            return this.image(pathName, fileName);
        }
        return biz.addRootPath(this.html(pathName, fileName));
    },
    file: function (pathName, fileName) {
        return this.html(pathName, fileName);
    },
    url: function (pathName, fileName) {
        // url
        if (/^v2/.test(fileName)) {
            return fileName;
        }
        return biz.loadImage.getName(pathName, fileName);
    },
    require: function (pathName, fileName) {
        var _rname = [];
        // 数组的形式要去掉字符串
        fileName.split(',').forEach(function (name) {
            name = name.trim();
            var requireName = biz.getRequireName(pathName, name);
            // 判断是否为字符串
            if (name.match(/['"]/)) {
                requireName = '"' + requireName + '"';
            }

            _rname.push(requireName);
        });

        return _rname.join(',');
    },
    // g_modules: function (pathName, fileName) {
    //     return this.require(pathName, fileName);
    // },
    require_to_url: function (pathName, fileName) {
        return this.image(pathName, fileName);
    }
};
// require replace name
exports.htmlRename = function (pathName, content) {
    return replaceContent(pathName, content);
};