/**
 * Created by bjhl on 15/11/27.
 */
const fs = require('fs');
const stylus = require('stylus');
const epr = require('edp-provider-rider');
const cleanCss = require('clean-css');
const less = require('less');
const path = require('path');

const util = require('../tool/util');
const biz = require('../tool/biz');
const config = require('../config');
const writeTask = require('./write');
const processFunc = require('../tool/process');
const processConfig = require('../processConfig');

const CleanCSS = new cleanCss();

// 默认配置
const stylusPlugin = epr.plugin({
    use: function (style) {
        style.define('url', epr.stylus.resolver());
    }
});
//编译前的长度
var compileLength = 0;
//编译后的长度
var compiledLength = 0;
// 写完文件后的长度
var finishWriteLength = 0;
var len = 0;

exports.cssResolve = function (deps, rootPath, callback, isSync, isOriginName) {
    // 当前文件的反依赖树
    deps = deps.join(); 

    // JS插件
    function isJsPlugin() {
        return deps.indexOf('.js') > -1;
    }
    // 入口文件
    function isExports() {
        return deps.indexOf('.tpl') > -1 || deps.indexOf('.html') > -1 || isJsPlugin();
    }
    // write
    function write(content) {
        function exitProcess () {
            finishWriteLength--;
            if (finishWriteLength === 0 && (compiledLength === compileLength)) {
                processFunc.sendMessage(process, {
                    act: processConfig.FINISH_WRITE
                });
            }
        }
        if (isSync) {
            // 同步
            var minified = CleanCSS.minify(content);
            
            if (minified && (undefined !== minified.styles)) {
                content = minified.styles;
                if (isJsPlugin()) {
                    // 添加缓冲
                    util.cachePlugin.set(rootPath, content);
                } else {
                    var releaseName = biz.getReleaseName(rootPath)
                    if (isOriginName) {
                        releaseName = releaseName.replace(path.extname(releaseName), '.css');
                    } else {
                        releaseName = biz.getReleaseMd5Name(biz.getReleaseName(rootPath), content);
                    }
                    writeTask.write(releaseName, content, null, isSync);
                }
            }
            return;
        }
        CleanCSS.minify(content, function (errors, minified) {
            if (!errors && minified && (undefined !== minified.styles)) {
                compiledLength++;
                content = minified.styles;
                if (isJsPlugin()) {
                    // 添加缓冲
                    util.cachePlugin.set(rootPath, content);
                    if (config.args.total !== 0) {
                        exitProcess();
                    }
                } else {
                    var saveName = biz.getReleaseMd5Name(biz.getReleaseName(rootPath), content);
                    if (config.args.total !== 0) {
                        writeTask.write(saveName, content, exitProcess);
                    } else {
                        writeTask.write(saveName, content);
                    }
                }
            } else {
                throw new Error(errors);
            }
            isCallback();
        });
    }
    //
    function isCallback() {
        if (compiledLength === compileLength) {
            callback && callback();
        }
    }
    //
    function replaceContent(content) {
        // image replace
        var reg = /url\((\s*?['"]?(?:[^'")]+)['"]?\s*?)\)/gi;

        var string = content.replace(reg, function (result, value) {
            // url(' or url("格式
            // var terms = result.split(/['"]/);
            // if (terms.length === 3) {
            //     value = terms[1];
            // }
            value = value.replace(/['"]/g, '');
            if (value) {
                if (util.isImage(value)) {
                    var imgName = biz.loadImage.getName(rootPath, value);
                    return "url('" + imgName + "')";
                }

                if (util.isFont(value)) {
                    var name = biz.getReleaseMd5Name(biz.getReleaseName(rootPath, value));
                    return "url('" + biz.addRootPath(name) + "')";
                    // return "url('" + name + "')";
                };

                /**
                 * hurry 避免url中带单引号场景，例如：url("data:image/svg+xml;charset=utf-8,%3Csvg%20viewBox%3D'0%200%20120%20120'%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20xmlns%3Axlink%3D'http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink'%3E%3Cdefs%3E%3Cline%20id%3D'l'%20x1%3D'60'%20x2%3D'60'%20y1%3D'7'%20y2%3D'27'%20stroke%3D'%23fff'%20stroke-width%3D'11'%20stroke-linecap%3D'round'%2F%3E%3C%2Fdefs%3E%3Cg%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(30%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(60%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(90%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(120%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(150%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.37'%20transform%3D'rotate(180%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.46'%20transform%3D'rotate(210%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.56'%20transform%3D'rotate(240%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.66'%20transform%3D'rotate(270%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.75'%20transform%3D'rotate(300%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.85'%20transform%3D'rotate(330%2060%2C60)'%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E");
                 */
                // return "url('" + value + "')";
                return result;
            }
            // }
            return result;
        });
        write(string);
    }

    function compile(content) {
        const extName = path.extname(rootPath);
        switch (extName) {
            case '.less':
                lessCompile(content);
                break;
            case '.styl':
                stylusCompile(content);
                break;
            case '.css':
                replaceContent(content);
                break;
        }
    }

    function stylusCompile(content) {
        var paths = [config.devDir.jsPath];
        // 处理./a.png这种相对路径
        // if (config.cssCompileRules.isRelativePath) {
        //     // 当前文件相对路径
        //     paths = [path.dirname(rootPath)];
        // }
        // console.log(rootPath);
        // console.log(path.dirname(rootPath));
        stylus(content)
            .set('filename', rootPath)
            .set('paths', paths)
            // 参考这里：http://www.zhangxinxu.com/jq/stylus/functions.url.php
            // .define('url', stylus.url({ paths: paths }))
            .use(stylusPlugin)
            .render(function (err, css) {
                if (err) {
                    throw new Error(err);
                }
                replaceContent(css);
            });
    }

    function lessCompile(content) {
        less.render(
            content,
            {
                paths: [config.devDir.jsPath],
                filename: rootPath,
                relativeUrls: true,
                syncImport: isSync,
                compress: util.isBeta()
            },
            function (error, output) {
                if (error) {
                    console.log(rootPath);
                    throw new Error(error);
                }
                replaceContent(output.css);
            }
        );
    }

    // 入口文件
    if (isExports() || isSync) {
        compileLength++;
        finishWriteLength++;
        if (isSync) {
            var ctt = fs.readFileSync(rootPath, 'utf-8');
            if (config.args.total === 0) {}
            else {
                console.log('css file:' + rootPath);
            }
            compile(ctt);
            return;
        }
        
        fs.readFile(rootPath, 'utf-8', function (rerr, content) {
            if (config.args.total === 0) {}
            else {
                console.log('css file:' + rootPath);
            }
            if (rerr) {
                throw new Error(rerr);
            } else {
                compile(content);
            }
        });
    }
};