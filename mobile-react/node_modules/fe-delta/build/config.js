const path = require('path');
const argv = require('yargs').argv;

const util = require('./util');

module.exports = (function () {
    var configFile = '../../../' + (argv.c || 'delta.config.js');
    var config = require(configFile);
    // console.log(config);
    var defaultOptions = {
        // 对插件的处理，
        // projectRoot: path.dirname(__dirname),
        projectRoot: path.resolve(__dirname, '../../../'),
        args: {
            condition: argv.s,
            total: argv.t,
            preCommitId: argv.p,
            lastCommitId: argv.l
        },
        // localStorage配置信息
        lsSet: {
            // localStorage的key前缀，用于同一域名多个项目，通过prefixKey匹配，避免重复删除
            // 例如：m1~v2/lib/zepto/zepto.debug.js
            // 默认: 'm'
            prefixKey: 'm1'
        },
        plugin: {
            /**
             * @params {String|Array} String push到原来的默认值中，Array 直接覆盖原来的默认值
             * 处理插件loader名称，例如： require('text!a.tpl); pluginNames: ['text']
             * 默认值：['text']，text用于处理tpl/html，css用于处理css
             */
            loaderNames: ['text!'],
            // css插件输出目录，默认_pluginCss
            cssOutputDir: '_pluginCss',
            // html插件输出目录，默认_pluginString
            htmlOutputDir: '_pluginString'
        },
        // 开发根目录
        devDir: {
            // 默认src
            // 1、view为空，存放js/css/html
            // 2、view非空，存放js/css
            src: '/src',
            // 第三方库地址
            lib: 'dep'
        },
        // 发布目录，不设置和devDir相同
        releaseDir: {
            // 根目录，默认output
            root: 'output',
            js: {
                root: 'public'
            },
            html: {
                root: 'view'
            }
        },
        // local loader config
        localLoaderConfig: {
            dirPath: '',
            enableCombo: false // 是否开启文件合并
        },
        devLoaderConfig: {
            dirPath: '',
            enableCombo: true
        },
        // dev beta loaderConfig
        betaLoaderConfig: {
            dirPath: '',
            enableCombo: true
        },
        // 上传图片服务器地址
        devImageServerPath: 'https://test-imgs.genshuixue.com/',
        betaImageServerPath: 'https://imgs.genshuixue.com/'
    };

    function validator() {
        if (!config) {
            throw new Error('请设置配置文件');
        }
        if (!config.depMap) {
            throw new Error('请设置配置文件中depMap属性');
        }
    }

    function formatter() {
        if (config.plugin && config.plugin.loaderNames) {
            if ((config.plugin.loaderNames + '' === config.plugin.loaderNames)) {
                // 字符串
                defaultOptions.plugin.loaderNames.push(config.plugin.loaderNames + '!');
            } else if (Array.isArray(config.plugin.loaderNames)) {
                config.plugin.loaderNames = config.plugin.loaderNames.map(function (item) {
                    return item + '!';
                });
            }
            var entryFile = config.depMap.entryFile;
            if (entryFile && entryFile.length) {
                if (entryFile + '' === entryFile) {
                    config.depMap.entryFile = [entryFile];
                }
            } else {
                config.depMap.entryFile = null;
                delete config.depMap.entryFile;
            }
        }
        // var options = Object.assign(defaultOptions, config);
        var options = util.extend(defaultOptions, config);
        // options.devDir.src = path.join(options.projectRoot, options.devDir.src);
        // options.devDir.view = path.join(options.projectRoot, (options.devDir.view || options.devDir.src));
        options.devDir.jsPath = path.join(options.projectRoot, options.devDir.js);
        options.devDir.libPath = path.join(options.projectRoot, options.devDir.lib);
        options.devDir.htmlPath = path.join(options.projectRoot, (options.devDir.html || options.devDir.js));
        // options.releaseDir.jsDir = path.join(options.projectRoot, options.releaseDir.root, options.releaseDir.jsDir);
        // options.releaseDir.src = options.releaseDir.src || options.devDir.jsPath;
        // options.releaseDir.lib = options.releaseDir.lib || options.devDir.libPath;
        // options.releaseDir.view = path.join(options.projectRoot, options.releaseDir.root, (options.releaseDir.view || options.devDir.htmlPath));
        options.releaseDir.js.root = path.join(options.projectRoot, options.releaseDir.root, options.releaseDir.js.root);
        options.releaseDir.js.src = options.releaseDir.js.src || options.devDir.jsPath;
        options.releaseDir.js.lib = options.releaseDir.js.lib || options.devDir.libPath;
        options.releaseDir.html.root = path.join(options.projectRoot, options.releaseDir.root, (options.releaseDir.html.root || options.devDir.htmlPath));
        options.manifest = path.join(options.devDir.jsPath, 'manifest.js');
        options.depMap.requireConfigJs = path.join(options.projectRoot, options.depMap.requireConfigJs);
        // 上传图片配置文件地址
        options.loadImagePath = path.join(options.releaseDir.js.src, 'loadImageConfig.json');

        return options;
    }

    validator();

    return formatter();
})();