/**
 * Created by bjhl on 15/11/27.
 */
const path = require('path');
const crypto = require('crypto');
const exec = require('child_process').exec;

const config = require('../config');
const globalUtil = require('../util');

exports.isDev = function () {
    return config.args.condition === 'test';
};

exports.isBeta = function () {
    return config.args.condition === 'beta';
};

exports.isLocal = function () {
    return !this.isDev() && !this.isBeta();
};

exports.isDomainPath = function (fileName) {
    // 2018/01/25考虑非{{}}开头场景
    return /^{{?[\s\S]*?}}?\/[\w\d\_\-]+/ig.test(fileName);
};

exports.isAbsolutePath = function (fileName) {
    return /^(http(s)?|\/\/)/.test(fileName);
};

exports.getDomainPath = function (releaseName) {
    if (this.isDomainPath(releaseName)) {
        return releaseName.match(/^{{[\s\S]*?}}/ig)[0];
    }
    return '';
};

//监听
exports.listerner = (function () {
    var _obj = {};
    return {
        add: function (evt, lisEvent) {
            _obj[evt] = '';

            Object.defineProperty(_obj, evt, {
                set: function (value) {
                    lisEvent && lisEvent(value);
                },
                get: function (value) {
                    return value;
                }
            });
        },
        trigger: function (evt, value) {
            _obj[evt] = value;
        }
    };
}());

// 获取文件类型
exports.getFileType = (function () {
    const _createRegExp = function (arr) {
        return new RegExp(arr.join('|'), 'ig');
    };

    return function (fileName) {
        fileName = exports.getFilterFileName(fileName);

        var extName = path.extname(fileName);
        var fileType = extName || 'js';

        var cssReg = _createRegExp(['.less', '.css', '.styl']);
        if (cssReg.test(extName)) {
            fileType = 'css';
        }

        var imageReg = _createRegExp(['.png', '.jpg', '.jpeg', '.gif', '.ico']);
        if (imageReg.test(extName)) {
            fileType = 'image';
        }

        var fontReg = _createRegExp(['.eot', '.woff', '.ttf', '.svg']);
        if (fontReg.test(extName)) {
            fileType = 'font';
        }

        if (extName == '.js') {
            fileType = 'js';
        }
        var htmlRegExp = _createRegExp(['.html']);
        if (htmlRegExp.test(extName)) {
            fileType = 'html';
        }

        var tplRegExp = _createRegExp(['.tpl']);
        if (tplRegExp.test(extName)) {
            fileType = 'tpl';
        }

        var swfRegExp = _createRegExp(['.swf']);
        if (swfRegExp.test(extName)) {
            fileType = 'swf';
        }

        var mp3RegExp = _createRegExp(['.mp3']);
        if (mp3RegExp.test(extName)) {
            fileType = 'mp3';
        }

        return fileType;
    };
}());

exports.isImage = function (fileName) {
    return this.getFileType(fileName) === 'image';
};

exports.isSwf = function (fileName) {
    return this.getFileType(fileName) === 'swf';
};

exports.isMp3 = function (fileName) {
    return this.getFileType(fileName) === 'mp3';
};

exports.isHtml = function (fileName) {
    if (config.htmlExt && config.htmlExt.length) {
        if (config.htmlExt.indexOf(path.extname(fileName)) > -1) {
            return true;
        }
        return false;
    }
    return this.getFileType(fileName) === 'html';
};

exports.isTpl = function (fileName) {
    return this.getFileType(fileName) === 'tpl';
};

exports.isJs = function (fileName) {
    return this.getFileType(fileName) === 'js';
};

exports.isCss = function (fileName) {
    return this.getFileType(fileName) === 'css';
};

exports.isFont = function (fileName) {
    return this.getFileType(fileName) === 'font';
};

exports.isOther = function (fileName) {
    return !this.isFont(fileName)
        && !this.isImage(fileName)
        && !this.isJs(fileName)
        && !this.isCss(fileName)
        && !this.isTpl(fileName)
        && !this.isHtml(fileName);
};
// 添加缓存
exports.cache = {
    _cache: {},
    set: function (property, obt, value) {
        this.create(property);

        if (typeof obt === 'string') {
            obt = exports.getFilterFileName(obt);

            if (value) {
                this._cache[property][obt] = value;
            } else {
                this._cache[property] = obt;
            }
        } else {
            exports.each(obt, function (val, key) {
                exports.cache.set(property, key, val);
            });
        }
    },
    create: function (property, key) {
        if (!this._cache[property]) {
            this._cache[property] = {};
        }
        if (key && !this._cache[property][key]) {
            this._cache[property][key] = {};
        }
    },
    get: function (property, key) {
        var pro = this._cache[property];

        if (pro && key) {
            key = exports.getFilterFileName(key);
            return pro[key];
        }
        return pro;
    },
    getCache: function () {
        return this._cache;
    },
    deepCopy: function (obj) {
        globalUtil.deepCopy(this._cache, obj);
    }
};
// css 插件
exports.cachePlugin = {
    set: function (key, value) {
        if (!value) {
            throw new Error('【' + key + '】文件不允许为空！');
        }
        exports.cache.set('cssPlugin', key, value);
    },
    get: function (key) {
        return exports.cache.get('cssPlugin', key);
    }
};

// md5
exports.cacheMd5 = {
    // 根据releaseName和内容生成MD5的缓存对象
    set: function (releaseName, content) {
        var fileType = exports.getFileType(releaseName);

        exports.cache.set(fileType, releaseName, exports.md5(content));
    },
    get: function (property, key) {
        return exports.cache.get(property, key);
    }
};
// md5
exports.cacheImage = {
    // 根据releaseName和内容生成MD5的缓存对象
    set: function (key, value) {
        exports.cache.set('image', key, value);
    },
    get: function (key) {
        exports.cache.get('image', key);
    }
};

// 根据内容生成发布后的MD5,并生成原文件与MD5映射表
exports.md5 = function (content) {
    var md5 = crypto.createHash('md5');
    md5.update(content);
    return md5.digest('hex').slice(0, 10);
};

exports.each = function (target, handler) {
    if (Object.prototype.toString.call(target) === '[object Array]') {
        for (var i = 0, l = target.length; i < l; i++) {
            handler(target[i], i);
        }
    } else {
        for (var key in target) {
            if (target.hasOwnProperty(key)) {
                handler && handler(target[key], key);
            }
        }
    }
};

// 判断是否以http,https,//,${(兼容etpl),{{,development开始文件内容
exports.isFilterPath = function (fileName) {
    // 静态资源不过滤
    if (exports.isDomainPath(fileName)) {
        return false;
    }

    var regExp = new RegExp(('^(' + config.devDir.jsPath + '|' + config.devDir.libPath + '|data:|,|http(s)?|\/\/|{{|\\${)'), "i");
    return regExp.test(fileName);
};
// path中包含js md5值
exports.isJsMD5InPath = function (fileName) {
    var _regExp = new RegExp(config.jsMD5InPath.join('|') + '$', 'ig');
    return _regExp.test(fileName);
};
// 不做处理的js
exports.isExcludeJs = function (fileName) {
    var _regExp = new RegExp(config.excludeJs.join('|') + '$', 'ig');
    return _regExp.test(fileName);
};

/*
 * 拼接文件名,如params,domain
 *
 * fileName: 原文件名
 * rootName: fileName的硬盘路径
 * */
exports.getCombineFileName = function (releaseName, fileName) {
    var domainPath = this.getDomainPath(fileName);

    if (domainPath) {
        releaseName = path.join(domainPath, releaseName);
    }

    var params = fileName.replace(fileName.split(/[\?\#]/)[0], '');

    return releaseName + params;
};
/*
* 过滤domain,params，返回fileName
* */
exports.getFilterFileName = function (fileName) {
    if (!fileName) {
        return fileName;
    }

    if (exports.isFilterPath(fileName)) {
        return fileName;
    }

    return fileName.replace(/((\?|\#)[\s\S]*|{{[\s\S]*?}}\/)/ig, '');
};
//
exports.addRequireExtName = function (fileName) {
    // 插件
    if (!exports.isHtml(fileName) && !exports.isTpl(fileName) && !exports.isImage(fileName) && !exports.isCss(fileName)) {
        return fileName + '.js';
    }
    return fileName;
};

// 修复HTML,CSS当中的路径
exports.fixPath = function (fileName, pathName) {
    fileName = exports.getFilterFileName(fileName);
    var projectDir = config.projectRoot;
    // 过滤依赖
    if (exports.isFilterPath(fileName)) {
        return fileName;
    }

    // 相对路径./ ../
    if (/^\.+/ig.test(fileName) && pathName) {
        var basePath = path.dirname(pathName);

        return path.join(basePath, fileName);
    }

    var prefix = {};
    prefix[config.devDir.js] = projectDir;
    prefix[config.devDir.lib] = projectDir;
    if (config.devDir.js.indexOf('/') !== 0) {
        prefix['/' + config.devDir.js] = projectDir;
    }
    if (config.devDir.lib.indexOf('/') !== 0) {
        prefix['/' + config.devDir.lib] = projectDir;
    }
    // 获取文件根路径,并添加"/";
    var fstart = '/' + fileName.replace(/^\//ig, '').split('/')[0];
    // 是否在配置文件当中，如果不存在，将所有路径添加根目录src
    var pfs = prefix[fstart];

    if (pfs) {
        return path.join(pfs, fileName);
    }

    if (exports.isHtml(fileName)) {
        return path.join(config.devDir.htmlPath, fileName);
    }
    return path.join(config.devDir.jsPath, fileName);
};

// 异常统一处理函数
exports.errorHandler = function (e) {
    if (config.args.total === 0 && exports.isDev()) {
        // 增量构建，test环境，回滚到上一个commit，避免下次构建错误
        // var commitId = comUtil.padStart(config.args.preCommitId, 7, 0);
        exec('git reset --hard ' + config.args.preCommitId, function (error) {
            if (error) {
                console.error(error);
                console.error('回滚到' + config.args.preCommitId + '失败，请手动执行！');
            }
        });
    }
    console.error('【出错信息】:' + e);
    console.trace();
    process.exit(1);
};