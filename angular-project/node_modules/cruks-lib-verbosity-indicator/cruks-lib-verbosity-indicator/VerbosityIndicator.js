/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
1 */

"use strict";

/**
 * @constructor
 * @param {Number} verbosity represents arbitrary verbosity number
 * @see {@link http://api.symfony.com/2.4/Symfony/Component/Console/Output/OutputInterface.html}
 */
function VerbosityIndicator(verbosity) {
    if ("number" === typeof(verbosity)) {
        this.verbosity = verbosity;

        return;
    }

    if (verbosity) {
        this.verbosity = verbosity.valueOf();

        return;
    }

    this.verbosity = VerbosityIndicator.VERBOSITY_NORMAL;
}

/**
 * @var {Number} do not output any messages
 */
VerbosityIndicator.VERBOSITY_QUIET = 0;

/**
 * @var {Number} the default verbosity level
 */
VerbosityIndicator.VERBOSITY_NORMAL = 1;

/**
 * @var {Number} increased verbosity of messages
 */
VerbosityIndicator.VERBOSITY_VERBOSE = 2;

/**
 * @var {Number} informative non essential messages
 */
VerbosityIndicator.VERBOSITY_VERY_VERBOSE = 3;

/**
 * @var {Number} debug messages
 */
VerbosityIndicator.VERBOSITY_DEBUG = 4;

/**
 * @returns {cruks-lib-verbosity-indicator/VerbosityIndicator}
 *     higher verbosity indicator
 * @throws {Error} if overflows verbosity
 */
VerbosityIndicator.prototype.createHigher = function () {
    if (this.isDebug()) {
        throw new Error("Verbosity cannot be higher than " + this.valueOf());
    }
    if (this.isVeryVerbose()) {
        return new VerbosityIndicator(VerbosityIndicator.VERBOSITY_DEBUG);
    }
    if (this.isVerbose()) {
        return new VerbosityIndicator(VerbosityIndicator.VERBOSITY_VERY_VERBOSE);
    }
    if (this.isNormal()) {
        return new VerbosityIndicator(VerbosityIndicator.VERBOSITY_VERBOSE);
    }

    return new VerbosityIndicator(VerbosityIndicator.VERBOSITY_NORMAL);
};

/**
 * @returns {cruks-lib-verbosity-indicator/VerbosityIndicator}
 *     higher verbosity indicator
 * @throws {Error} if underflows verbosity
 */
VerbosityIndicator.prototype.createSmaller = function () {
    if (this.isDebug()) {
        return new VerbosityIndicator(VerbosityIndicator.VERBOSITY_VERY_VERBOSE);
    }
    if (this.isVeryVerbose()) {
        return new VerbosityIndicator(VerbosityIndicator.VERBOSITY_VERBOSE);
    }
    if (this.isVerbose()) {
        return new VerbosityIndicator(VerbosityIndicator.VERBOSITY_NORMAL);
    }
    if (this.isNormal()) {
        return new VerbosityIndicator(VerbosityIndicator.VERBOSITY_QUIET);
    }

    throw new Error("Verbosity cannot be lower than " + this.valueOf());
};

/**
 * @returns {Boolean} true if debug messages, false otherwise
 */
VerbosityIndicator.prototype.isDebug = function () {
    return this.verbosity >= VerbosityIndicator.VERBOSITY_DEBUG;
};

/**
 * @param {cruks-lib-verbosity-indicator/VerbosityIndicator} other
 *     another indicator to compare
 * @returns {Boolean} true if verbosity is higher than other, false otherwise
 */
VerbosityIndicator.prototype.isHigherThan = function (other) {
    if (this.isQuiet()) {
        return false;
    }

    return this.isNormal() && other.isQuiet()
    || this.isVerbose() && !other.isVerbose()
    || this.isVeryVerbose() && !other.isVeryVerbose()
    || this.isDebug() && !other.isDebug();
};

/**
 * @returns {Boolean} true if the default verbosity level, false otherwise
 */
VerbosityIndicator.prototype.isNormal = function () {
    return this.verbosity >= VerbosityIndicator.VERBOSITY_NORMAL;
};

/**
 * @returns {Boolean} true if do not output any messages, false otherwise
 */
VerbosityIndicator.prototype.isQuiet = function () {
    return this.verbosity < VerbosityIndicator.VERBOSITY_NORMAL;
};

/**
 * @param {cruks-lib-verbosity-indicator/VerbosityIndicator} other
 *     another indicator to compare
 * @returns {Boolean} true if verbosity is same as other, false otherwise
 */
VerbosityIndicator.prototype.isSameAs = function (other) {
    return !this.isHigherThan(other) && !this.isSmallerThan(other);
};

/**
 * @param {cruks-lib-verbosity-indicator/VerbosityIndicator} other
 *     another indicator to compare
 * @returns {Boolean} true if verbosity is smaller than other, false otherwise
 */
VerbosityIndicator.prototype.isSmallerThan = function (other) {
    if (this.isDebug()) {
        return false;
    }

    return this.isQuiet() && other.isNormal()
    || !this.isVerbose() && other.isVerbose()
    || !this.isVeryVerbose() && other.isVeryVerbose()
    || !this.isDebug() && other.isDebug();
};

/**
 * @returns {Boolean} true if increased verbosity of messages, false otherwise
 */
VerbosityIndicator.prototype.isVerbose = function () {
    return this.verbosity >= VerbosityIndicator.VERBOSITY_VERBOSE;
};

/**
 * @returns {Boolean} true if informative non essential messages, false otherwise
 */
VerbosityIndicator.prototype.isVeryVerbose = function () {
    return this.verbosity >= VerbosityIndicator.VERBOSITY_VERY_VERBOSE;
};

/**
 * @returns {void}
 */
VerbosityIndicator.prototype.setDebug = function () {
    this.verbosity = VerbosityIndicator.VERBOSITY_DEBUG;
};

/**
 * @returns {void}
 */
VerbosityIndicator.prototype.setNormal = function () {
    this.verbosity = VerbosityIndicator.VERBOSITY_NORMAL;
};

/**
 * @returns {void}
 */
VerbosityIndicator.prototype.setQuiet = function () {
    this.verbosity = VerbosityIndicator.VERBOSITY_QUIET;
};

/**
 * @returns {void}
 */
VerbosityIndicator.prototype.setVerbose = function () {
    this.verbosity = VerbosityIndicator.VERBOSITY_VERBOSE;
};

/**
 * @returns {void}
 */
VerbosityIndicator.prototype.setVeryVerbose = function () {
    this.verbosity = VerbosityIndicator.VERBOSITY_VERY_VERBOSE;
};

/**
 * @returns {Number} current exact verbosity level
 */
VerbosityIndicator.prototype.valueOf = function () {
    return this.verbosity;
};

module.exports = VerbosityIndicator;
