/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

/* global describe: false, it: false */

var assert = require("assert"),
    VerbosityIndicator = require(global.paths.root + "/cruks-lib-verbosity-indicator/VerbosityIndicator");

describe("cruks-lib-verbosity-indicator/VerbosityIndicator", function () {
    describe("#createHigher()", function () {
        var vi = new VerbosityIndicator(VerbosityIndicator.VERBOSITY_QUIET);

        it("returns object with higher verbosity", function () {
            vi = vi.createHigher();

            assert.ok(!vi.isQuiet());
            assert.ok(vi.isNormal());
            assert.ok(!vi.isVerbose());
            assert.ok(!vi.isVeryVerbose());
            assert.ok(!vi.isDebug());
        });

        it("returns object with verbose verbosity", function () {
            vi = vi.createHigher();

            assert.ok(!vi.isQuiet());
            assert.ok(vi.isNormal());
            assert.ok(vi.isVerbose());
            assert.ok(!vi.isVeryVerbose());
            assert.ok(!vi.isDebug());
        });

        it("returns object with very verbose verbosity", function () {
            vi = vi.createHigher();

            assert.ok(!vi.isQuiet());
            assert.ok(vi.isNormal());
            assert.ok(vi.isVerbose());
            assert.ok(vi.isVeryVerbose());
            assert.ok(!vi.isDebug());
        });

        it("returns object with debug verbosity", function () {
            vi = vi.createHigher();

            assert.ok(!vi.isQuiet());
            assert.ok(vi.isNormal());
            assert.ok(vi.isVerbose());
            assert.ok(vi.isVeryVerbose());
            assert.ok(vi.isDebug());
        });
    });

    describe("#createSmaller()", function () {
        var vi = new VerbosityIndicator(VerbosityIndicator.VERBOSITY_DEBUG);

        it("returns object with smaller verbosity", function () {
            vi = vi.createSmaller();

            assert.ok(!vi.isQuiet());
            assert.ok(vi.isNormal());
            assert.ok(vi.isVerbose());
            assert.ok(vi.isVeryVerbose());
            assert.ok(!vi.isDebug());
        });

        it("returns object with verbose verbosity", function () {
            vi = vi.createSmaller();

            assert.ok(!vi.isQuiet());
            assert.ok(vi.isNormal());
            assert.ok(vi.isVerbose());
            assert.ok(!vi.isVeryVerbose());
            assert.ok(!vi.isDebug());
        });

        it("returns object with normal verbosity", function () {
            vi = vi.createSmaller();

            assert.ok(!vi.isQuiet());
            assert.ok(vi.isNormal());
            assert.ok(!vi.isVerbose());
            assert.ok(!vi.isVeryVerbose());
            assert.ok(!vi.isDebug());
        });

        it("returns object with quiet verbosity", function () {
            vi = vi.createSmaller();

            assert.ok(vi.isQuiet());
            assert.ok(!vi.isNormal());
            assert.ok(!vi.isVerbose());
            assert.ok(!vi.isVeryVerbose());
            assert.ok(!vi.isDebug());
        });
    });

    describe("#isQuiet()", function () {
        it("reports true when verbosity is quiet", function () {
            var vi = new VerbosityIndicator(VerbosityIndicator.VERBOSITY_QUIET);

            assert.ok(vi.isQuiet());
            assert.ok(!vi.isNormal());
            assert.ok(!vi.isVerbose());
            assert.ok(!vi.isVeryVerbose());
            assert.ok(!vi.isDebug());
        });
    });

    describe("#isNormal()", function () {
        it("has normal verbosity by default", function () {
            var vi = new VerbosityIndicator();

            assert.ok(!vi.isQuiet());
            assert.ok(vi.isNormal());
            assert.ok(!vi.isVerbose());
            assert.ok(!vi.isVeryVerbose());
            assert.ok(!vi.isDebug());
        });

        it("reports true when verbosity is normal", function () {
            var vi = new VerbosityIndicator(VerbosityIndicator.VERBOSITY_NORMAL);

            assert.ok(!vi.isQuiet());
            assert.ok(vi.isNormal());
            assert.ok(!vi.isVerbose());
            assert.ok(!vi.isVeryVerbose());
            assert.ok(!vi.isDebug());
        });
    });

    describe("comparisons", function () {
        var vi1 = new VerbosityIndicator(VerbosityIndicator.VERBOSITY_QUIET),
            vi2 = new VerbosityIndicator(VerbosityIndicator.VERBOSITY_NORMAL),
            vi3 = new VerbosityIndicator(VerbosityIndicator.VERBOSITY_VERBOSE),
            vi4 = new VerbosityIndicator(VerbosityIndicator.VERBOSITY_VERY_VERBOSE),
            vi5 = new VerbosityIndicator(VerbosityIndicator.VERBOSITY_DEBUG);

        describe("#isHigherThan()", function () {
            it("quiet is not higher than anything", function () {
                assert.ok(!vi1.isHigherThan(vi1));
                assert.ok(!vi1.isHigherThan(vi2));
                assert.ok(!vi1.isHigherThan(vi3));
                assert.ok(!vi1.isHigherThan(vi4));
                assert.ok(!vi1.isHigherThan(vi5));
            });

            it("normal is higher than quiet", function () {
                assert.ok(vi2.isHigherThan(vi1));
                assert.ok(!vi2.isHigherThan(vi2));
                assert.ok(!vi2.isHigherThan(vi3));
                assert.ok(!vi2.isHigherThan(vi4));
                assert.ok(!vi2.isHigherThan(vi5));
            });

            it("verbose is higher than normal", function () {
                assert.ok(vi3.isHigherThan(vi1));
                assert.ok(vi3.isHigherThan(vi2));
                assert.ok(!vi3.isHigherThan(vi3));
                assert.ok(!vi3.isHigherThan(vi4));
                assert.ok(!vi3.isHigherThan(vi5));
            });

            it("very verbose is higher than normal", function () {
                assert.ok(vi4.isHigherThan(vi1));
                assert.ok(vi4.isHigherThan(vi2));
                assert.ok(vi4.isHigherThan(vi3));
                assert.ok(!vi4.isHigherThan(vi4));
                assert.ok(!vi4.isHigherThan(vi5));
            });

            it("debug is higher than very verbose", function () {
                assert.ok(vi5.isHigherThan(vi1));
                assert.ok(vi5.isHigherThan(vi2));
                assert.ok(vi5.isHigherThan(vi3));
                assert.ok(vi5.isHigherThan(vi4));
                assert.ok(!vi5.isHigherThan(vi5));
            });
        });

        describe("#isSameAs()", function () {
            it("is same as other quiet verbosity", function () {
                assert.ok(vi1.isSameAs(vi1));
                assert.ok(!vi1.isSameAs(vi2));
                assert.ok(!vi1.isSameAs(vi3));
                assert.ok(!vi1.isSameAs(vi4));
                assert.ok(!vi1.isSameAs(vi5));
            });

            it("is same as other quiet verbosity with different value", function () {
                var viq1 = new VerbosityIndicator(-5),
                    viq2 = new VerbosityIndicator(0);

                assert.ok(viq1.isQuiet());
                assert.ok(viq2.isQuiet());

                assert.ok(viq1.isSameAs(viq2));
            });

            it("is same as other normal verbosity", function () {
                assert.ok(!vi2.isSameAs(vi1));
                assert.ok(vi2.isSameAs(vi2));
                assert.ok(!vi2.isSameAs(vi3));
                assert.ok(!vi2.isSameAs(vi4));
                assert.ok(!vi2.isSameAs(vi5));
            });

            it("is same as other verbose verbosity", function () {
                assert.ok(!vi3.isSameAs(vi1));
                assert.ok(!vi3.isSameAs(vi2));
                assert.ok(vi3.isSameAs(vi3));
                assert.ok(!vi3.isSameAs(vi4));
                assert.ok(!vi3.isSameAs(vi5));
            });

            it("is same as other very verbose verbosity", function () {
                assert.ok(!vi4.isSameAs(vi1));
                assert.ok(!vi4.isSameAs(vi2));
                assert.ok(!vi4.isSameAs(vi3));
                assert.ok(vi4.isSameAs(vi4));
                assert.ok(!vi4.isSameAs(vi5));
            });

            it("is same as other debug verbosity", function () {
                assert.ok(!vi5.isSameAs(vi1));
                assert.ok(!vi5.isSameAs(vi2));
                assert.ok(!vi5.isSameAs(vi3));
                assert.ok(!vi5.isSameAs(vi4));
                assert.ok(vi5.isSameAs(vi5));
            });
        });

        describe("#isSmallerThan()", function () {
            it("quiet is smaller than anything", function () {
                assert.ok(!vi1.isSmallerThan(vi1));
                assert.ok(vi1.isSmallerThan(vi2));
                assert.ok(vi1.isSmallerThan(vi3));
                assert.ok(vi1.isSmallerThan(vi4));
                assert.ok(vi1.isSmallerThan(vi5));
            });

            it("normal is smaller than verbose", function () {
                assert.ok(!vi2.isSmallerThan(vi1));
                assert.ok(!vi2.isSmallerThan(vi2));
                assert.ok(vi2.isSmallerThan(vi3));
                assert.ok(vi2.isSmallerThan(vi4));
                assert.ok(vi2.isSmallerThan(vi5));
            });

            it("verbose is smaller than very verbose", function () {
                assert.ok(!vi3.isSmallerThan(vi1));
                assert.ok(!vi3.isSmallerThan(vi2));
                assert.ok(!vi3.isSmallerThan(vi3));
                assert.ok(vi3.isSmallerThan(vi4));
                assert.ok(vi3.isSmallerThan(vi5));
            });

            it("very verbose is smaller than debug", function () {
                assert.ok(!vi4.isSmallerThan(vi1));
                assert.ok(!vi4.isSmallerThan(vi2));
                assert.ok(!vi4.isSmallerThan(vi3));
                assert.ok(!vi4.isSmallerThan(vi4));
                assert.ok(vi4.isSmallerThan(vi5));
            });

            it("debug is not smaller than anything", function () {
                assert.ok(!vi5.isSmallerThan(vi1));
                assert.ok(!vi5.isSmallerThan(vi2));
                assert.ok(!vi5.isSmallerThan(vi3));
                assert.ok(!vi5.isSmallerThan(vi4));
                assert.ok(!vi5.isSmallerThan(vi5));
            });
        });
    });

    describe("#isVerbose()", function () {
        it("reports true when verbosity is verbose", function () {
            var vi = new VerbosityIndicator(VerbosityIndicator.VERBOSITY_VERBOSE);

            assert.ok(!vi.isQuiet());
            assert.ok(vi.isNormal());
            assert.ok(vi.isVerbose());
            assert.ok(!vi.isVeryVerbose());
            assert.ok(!vi.isDebug());
        });
    });

    describe("#isVeryVerbose()", function () {
        it("reports true when verbosity is very verbose", function () {
            var vi = new VerbosityIndicator(VerbosityIndicator.VERBOSITY_VERY_VERBOSE);

            assert.ok(!vi.isQuiet());
            assert.ok(vi.isNormal());
            assert.ok(vi.isVerbose());
            assert.ok(vi.isVeryVerbose());
            assert.ok(!vi.isDebug());
        });
    });

    describe("#isDebug()", function () {
        it("reports true when verbosity is very verbose", function () {
            var vi = new VerbosityIndicator(VerbosityIndicator.VERBOSITY_DEBUG);

            assert.ok(!vi.isQuiet());
            assert.ok(vi.isNormal());
            assert.ok(vi.isVerbose());
            assert.ok(vi.isVeryVerbose());
            assert.ok(vi.isDebug());
        });
    });

    describe("#setDebug()", function () {
        it("sets debug verbosity", function () {
            var vi = new VerbosityIndicator();

            vi.setDebug();

            assert.ok(!vi.isQuiet());
            assert.ok(vi.isNormal());
            assert.ok(vi.isVerbose());
            assert.ok(vi.isVeryVerbose());
            assert.ok(vi.isDebug());
        });
    });

    describe("#setNormal()", function () {
        it("sets normal verbosity", function () {
            var vi = new VerbosityIndicator();

            vi.setNormal();

            assert.ok(!vi.isQuiet());
            assert.ok(vi.isNormal());
            assert.ok(!vi.isVerbose());
            assert.ok(!vi.isVeryVerbose());
            assert.ok(!vi.isDebug());
        });
    });

    describe("#setQuiet()", function () {
        it("sets quiet verbosity", function () {
            var vi = new VerbosityIndicator();

            vi.setQuiet();

            assert.ok(vi.isQuiet());
            assert.ok(!vi.isNormal());
            assert.ok(!vi.isVerbose());
            assert.ok(!vi.isVeryVerbose());
            assert.ok(!vi.isDebug());
        });
    });

    describe("#setVerbose()", function () {
        it("sets verbose verbosity", function () {
            var vi = new VerbosityIndicator();

            vi.setVerbose();

            assert.ok(!vi.isQuiet());
            assert.ok(vi.isNormal());
            assert.ok(vi.isVerbose());
            assert.ok(!vi.isVeryVerbose());
            assert.ok(!vi.isDebug());
        });
    });

    describe("#setVeryVerbose()", function () {
        it("sets very verbose verbosity", function () {
            var vi = new VerbosityIndicator();

            vi.setVeryVerbose();

            assert.ok(!vi.isQuiet());
            assert.ok(vi.isNormal());
            assert.ok(vi.isVerbose());
            assert.ok(vi.isVeryVerbose());
            assert.ok(!vi.isDebug());
        });
    });
});
