/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

/*eslint new-cap: 0 */
/*global describe: false, it: false */

var assert = require("chai").assert,
    Exception = require(process.env.PACKAGE_ROOT + "/cruks-lib-exception/Exception");

describe("cruks-lib-exception/Exception", function () {
    it("forces to be called as a constructor", function () {
        assert.instanceOf(Exception(), TypeError);
        assert.instanceOf(new Exception(), Exception);
    });

    it("provides extensible exception", function () {
        var message = "test message",
            error;

        function MyError(message, previous) {
            Exception.call(this, message, previous);
        }
        MyError.prototype = Object.create(Exception.prototype);
        MyError.prototype.constructor = MyError;

        error = new MyError(message);

        assert.instanceOf(error, Error);
        assert.instanceOf(error, Exception);

        assert.strictEqual(message, error.message);
        assert.strictEqual("MyError", error.name);

        assert.strictEqual(0, error.stack.indexOf(error.toString()));
    });

    describe("#length", function () {
        it("maintains exception chain length", function () {
            var error = new Exception("hello", new Exception("world", new Exception("!")));

            assert.strictEqual(3, error.length);
        });
    });

    describe("#message", function () {});

    describe("#setPreviousException()", function () {
        it("maintains exception chained message", function () {
            var error1 = new Exception("hi"),
                error2 = new Exception("ho");

            error1.setPreviousException(error2);

            assert.strictEqual([
                "Exception: hi",
                "Exception: ho"
            ].join("\n"), error1.toString());
        });
    });

    describe("#toString()", function () {
        it("maintains exception chained message", function () {
            var error;

            error = new Exception("hello", new Exception("world", new Exception("!")));

            assert.strictEqual([
                "Exception: hello",
                "Exception: world",
                "Exception: !"
            ].join("\n"), error.toString());
        });

        it("incorporates error from plain error", function () {
            var error = new Exception("foo", new Error("bar"));

            assert.strictEqual([
                "Exception: foo",
                "Error: bar"
            ].join("\n"), error.toString());
        });
    });
});
