/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

var path = require("path"),
    Assertion = require(path.join(__dirname, "/../Assertion")),
    FunctionTypeAssertion = require(path.join(__dirname, "/../Assertion/Type/Function")),
    StringBuilder = require("cruks-lib-string-builder").StringBuilder,
    StringTypeAssertion = require(path.join(__dirname, "/../Assertion/Type/String"));

/**
 * @auguments cruks-lib-config/Testable/Assertion
 * @constructor
 * @param {Function} validator item used as internal assertion validator
 */
function CustomAssertion(validator) {
    Assertion.call(this);

    this.validator = (new FunctionTypeAssertion()).assert(validator);
}
CustomAssertion.prototype = Object.create(Assertion.prototype);

CustomAssertion.prototype.getExpectationBaseMessage = function (item, verbosity) {
    if (this.message) {
        return new StringBuilder(" ", verbosity).append(this.message);
    }

    return Assertion.prototype.getExpectationBaseMessage.call(this, item, verbosity);
};

CustomAssertion.prototype.test = function (item, verbosity, tracker) {
    var that = this;

    return this.validator.call(null, item, function (message) {
        that.message = new StringTypeAssertion().optional().assert(message, verbosity, tracker);

        return that.createAssertionFailureException(item, verbosity, tracker);
    });
};

module.exports = CustomAssertion;
