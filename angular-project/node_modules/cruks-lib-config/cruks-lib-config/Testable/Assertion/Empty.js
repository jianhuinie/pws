/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

var path = require("path"),
    Assertion = require(path.join(__dirname, "/../Assertion")),
    StringBuilder = require("cruks-lib-string-builder").StringBuilder;

/**
 * @auguments cruks-lib-config/Testable/Assertion
 * @constructor
 */
function EmptyAssertion() {
    Assertion.call(this);
}
EmptyAssertion.prototype = Object.create(Assertion.prototype);

EmptyAssertion.prototype.getExpectationBaseMessage = function (item, verbosity, isNegated) {
    var message = new StringBuilder(" ", verbosity);

    if (isNegated) {
        message.append("populated");
    } else {
        message.append("empty");
    }

    return message.append("element");
};

EmptyAssertion.prototype.test = function (item, verbosity, tracker) {
    if (this.isEmpty(item)) {
        return item;
    }
    if (Array.isArray(item)) {
        return this.testArray(item, verbosity, tracker);
    }
    if (typeof item === "object") {
        return this.testObject(item, verbosity, tracker);
    }

    this.throwAssertionFailureException(item, verbosity, tracker);
};

/**
 * @param {*} item element to be checked against
 * @param {cruks-lib-verbosity-indicator/Verbosity} verbosity message eloquence
 * @param {cruks-lib-config/TraverseTracker} tracker progress observer
 * @returns {*} input element
 */
EmptyAssertion.prototype.testArray = function (item, verbosity, tracker) {
    if (item.length > 0) {
        this.throwAssertionFailureException(item, verbosity, tracker);
    }

    return item;
};

/**
 * @param {*} item element to be checked against
 * @param {cruks-lib-verbosity-indicator/Verbosity} verbosity message eloquence
 * @param {cruks-lib-config/TraverseTracker} tracker progress observer
 * @returns {*} input element
 */
EmptyAssertion.prototype.testObject = function (item, verbosity, tracker) {
    this.testArray(Object.keys(item), verbosity, tracker);

    return item;
};

module.exports = EmptyAssertion;
