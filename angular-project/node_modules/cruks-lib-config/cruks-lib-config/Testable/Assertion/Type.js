/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

var path = require("path"),
    Assertion = require(path.join(__dirname, "/../Assertion")),
    ExactAssertion = require(path.join(__dirname, "/Exact")),
    StringBuilder = require("cruks-lib-string-builder").StringBuilder,
    Testable = require(path.join(__dirname, "/../../Testable"));

/**
 * @auguments cruks-lib-config/Testable/Assertion
 * @constructor
 * @param {String} type type to be asserted
 */
function TypeAssertion(type) {
    Assertion.call(this);

    if (!(type instanceof Testable)) {
        this.typeName = type;
        type = new ExactAssertion(type);
    }

    this.type = type;
}
TypeAssertion.prototype = Object.create(Assertion.prototype);

TypeAssertion.prototype.getExpectationBaseMessage = function (item, verbosity, isNegated) {
    var message = new StringBuilder(" ", verbosity);

    if (isNegated) {
        message.append("not");
    }

    message.append(this.typeName);

    return message;
};

TypeAssertion.prototype.isEmpty = function (item) {
    if (typeof item === this.typeName) {
        return false;
    }

    return Assertion.prototype.isEmpty.call(this, item);
};

TypeAssertion.prototype.test = function (item, verbosity, tracker) {
    if (this.type.isPassing(typeof item, verbosity, tracker)) {
        return item;
    }

    this.throwAssertionFailureException(item, verbosity, tracker);
};

module.exports = TypeAssertion;
