/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

var path = require("path"),
    ArrayObjectTypeAssertion = require(path.join(__dirname, "/Type/Object/Array")),
    Assertion = require(path.join(__dirname, "/../Assertion")),
    StringBuilder = require("cruks-lib-string-builder").StringBuilder;

/**
 * @auguments cruks-lib-config/Testable/Assertion
 * @constructor
 * @param {Array} list list of assertions to be checked
 */
function EveryAssertion(list) {
    Assertion.call(this);

    this.array = new ArrayObjectTypeAssertion();
    this.nestedAssertions = this.array.assert(list);
}
EveryAssertion.prototype = Object.create(Assertion.prototype);

EveryAssertion.prototype.getExpectationBaseMessage = function (item, verbosity, isNegated) {
    var ret = new StringBuilder(" and ", verbosity);

    this.nestedAssertions.map(function (assertion) {
        return ret.append(assertion.getExpectationMessage(item, verbosity, isNegated));
    });

    return ret;
};

EveryAssertion.prototype.test = function (item, verbosity, tracker) {
    var i;

    for (i = 0; i < this.nestedAssertions.length; i += 1) {
        if (!this.nestedAssertions[i].isPassing(item, verbosity, tracker)) {
            this.throwAssertionFailureException(item, verbosity, tracker);
        }
    }

    return item;
};

module.exports = EveryAssertion;
