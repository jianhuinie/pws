/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

var path = require("path"),
    ArrayObjectTypeAssertion = require(path.join(__dirname, "/Type/Object/Array")),
    Assertion = require(path.join(__dirname, "/../Assertion")),
    EveryAssertion = require(path.join(__dirname, "/Every")),
    IgnoreResult = require(path.join(__dirname, "/../../Result/Ignore")),
    InstanceOfAssertion = require(path.join(__dirname, "/InstanceOf")),
    NegatedAssertion = require(path.join(__dirname, "/Negated")),
    ObjectTypeAssertion = require(path.join(__dirname, "/Type/Object")),
    StringBuilder = require("cruks-lib-string-builder").StringBuilder,
    Testable = require(path.join(__dirname, "/../../Testable"));

/**
 * @auguments cruks-lib-config/Testable/Assertion
 * @constructor
 * @param {Object} schema object containing nested expectations
 */
function SchemaAssertion(schema) {
    Assertion.call(this);

    this.schema = new ObjectTypeAssertion().assert(schema);
}
SchemaAssertion.prototype = Object.create(Assertion.prototype);

/**
 * @param {*} item element to be checked against
 * @param {*} modifier item used as additional assertion checker
 * @param {cruks-lib-verbosity-indicator/Verbosity} verbosity message eloquence
 * @param {cruks-lib-config/TraverseTracker} tracker progress observer
 * @returns {cruks-lib-config/Testable/Assertion/Object} strictly validated object
 */
SchemaAssertion.prototype.expectStrictObject = function (item, modifier, verbosity /*, tracker*/ ) {
    var object = new ObjectTypeAssertion(),
        property;

    for (property in modifier) {
        if (modifier.hasOwnProperty(property) && !modifier[property].isOptional()) {
            object.includesKey(property);
        }
    }

    for (property in item) {
        if (item.hasOwnProperty(property) && !modifier.hasOwnProperty(property)) {
            object.doesNotIncludeKey(property);
        }
    }

    return object;
};

SchemaAssertion.prototype.getExpectationBaseMessage = function (item, verbosity, isNegated) {
    var message = new StringBuilder(" ", verbosity);

    if (isNegated) {
        message.append("not");
    }

    return message.append("schema");
};

/**
 * @param {Boolean} strict 'is strict' constraint
 * @returns {cruks-lib-config/Testable/Assertion/Schema} chained object
 */
SchemaAssertion.prototype.strict = function (strict) {
    if (typeof strict === "undefined") {
        strict = true;
    }

    this.modifiers.strict = strict;

    return this;
};

SchemaAssertion.prototype.test = function (item, verbosity, tracker) {
    var property,
        result;

    item = this.testInput(item, this.schema, verbosity, tracker);

    for (property in this.schema) {
        if (this.schema.hasOwnProperty(property)) {
            this.schema[property] = this.testAssertion(this.schema[property], this.schema, verbosity, tracker.fork(property));
            if (!this.schema[property].canUseOptional(item[property], item.hasOwnProperty(property)) || this.schema[property].canUseDefault(item[property])) {
                result = this.schema[property].assert(item[property], verbosity, tracker.fork(property));
                if (!(result instanceof IgnoreResult)) {
                    item[property] = result;
                }
            }
        }
    }

    return item;
};

/**
 * @param {*} item element to be checked against
 * @param {*} modifier item used as additional assertion checker
 * @param {cruks-lib-verbosity-indicator/Verbosity} verbosity message eloquence
 * @param {cruks-lib-config/TraverseTracker} tracker progress observer
 * @returns {*} input item
 */
SchemaAssertion.prototype.testAssertion = function (item, modifier, verbosity, tracker) {
    return new InstanceOfAssertion(Testable).assert(item, verbosity, tracker);
};

/**
 * @param {*} item element to be checked against
 * @param {*} modifier item used as additional assertion checker
 * @param {cruks-lib-verbosity-indicator/Verbosity} verbosity message eloquence
 * @param {cruks-lib-config/TraverseTracker} tracker progress observer
 * @returns {*} input item
 */
SchemaAssertion.prototype.testInput = function (item, modifier, verbosity, tracker) {
    var array = new ArrayObjectTypeAssertion(),
        inputAssertion,
        object;

    if (this.modifiers.strict) {
        object = this.expectStrictObject(item, modifier, object, verbosity, tracker);
    } else {
        object = new ObjectTypeAssertion();
    }

    inputAssertion = new EveryAssertion([object, new NegatedAssertion(array)]);

    return inputAssertion.assert(item, verbosity, tracker);
};

module.exports = SchemaAssertion;
