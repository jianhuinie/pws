/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

var path = require("path"),
    ObjectTypeAssertion = require(path.join(__dirname, "/../Object")),
    StringBuilder = require("cruks-lib-string-builder").StringBuilder;

/**
 * @auguments cruks-lib-config/Testable/Assertion/Type/Object
 * @constructor
 */
function ArrayObjectTypeAssertion() {
    ObjectTypeAssertion.call(this);

    this.typeName = "array";
}
ArrayObjectTypeAssertion.prototype = Object.create(ObjectTypeAssertion.prototype);

/**
 * @param {*} item element to be checked against being nested inside and array
 * @returns {cruks-lib-config/Testable/Assertion/Array} chained object
 */
ArrayObjectTypeAssertion.prototype.every = function (item) {
    this.modifiers.every = item;

    return this;
};

ArrayObjectTypeAssertion.prototype.getExpectationModifierMessage = function (item, verbosity, isNegated) {
    var message = new StringBuilder(" ", verbosity),
        parentMessage = ObjectTypeAssertion.prototype.getExpectationModifierMessage.call(this, item, verbosity, isNegated);

    if (!parentMessage.isEmpty()) {
        message.append(parentMessage);
    }
    if (this.modifiers.hasOwnProperty("every")) {
        return message.append("of").append(this.modifiers.every.getExpectationMessage(item));
    }
    if (this.modifiers.hasOwnProperty("has")) {
        return message.append("having").appendDump(this.modifiers.has);
    }

    return message;
};

ArrayObjectTypeAssertion.prototype.getExpectationBaseMessage = function (item, verbosity, isNegated) {
    var message = new StringBuilder(" ", verbosity);

    if (isNegated) {
        message.append("not");
    }

    message.append("array");

    return message;
};

/**
 * @param {*} item element to be checked against being nested inside and array
 * @returns {cruks-lib-config/Testable/Assertion/Array} chained object
 */
ArrayObjectTypeAssertion.prototype.has = function (item) {
    this.modifiers.has = item;

    return this;
};

ArrayObjectTypeAssertion.prototype.isEmpty = function (item) {
    if (Array.isArray(item)) {
        return false;
    }

    return ObjectTypeAssertion.prototype.isEmpty.call(this, item);
};

/**
 * @param {*} item element to be checked against being nested inside and array
 * @returns {cruks-lib-config/Testable/Assertion/Array} chained object
 */
ArrayObjectTypeAssertion.prototype.length = function (item) {
    return this.property("length", item);
};

ArrayObjectTypeAssertion.prototype.test = function (item, verbosity, tracker) {
    item = ObjectTypeAssertion.prototype.test.call(this, item, verbosity, tracker);

    if (!Array.isArray(item)) {
        this.throwAssertionFailureException(item, verbosity, tracker);
    }

    if (this.modifiers.hasOwnProperty("every")) {
        item = this.testEvery(item, this.modifiers.every, verbosity, tracker);
    }
    if (this.modifiers.hasOwnProperty("has")) {
        item = this.testHas(item, this.modifiers.has, verbosity, tracker);
    }

    return item;
};

/**
 * @param {*} item element to be checked against
 * @param {*} modifier item used as additional assertion checker
 * @param {cruks-lib-verbosity-indicator/Verbosity} verbosity message eloquence
 * @param {cruks-lib-config/TraverseTracker} tracker progress observer
 * @returns {void}
 */
ArrayObjectTypeAssertion.prototype.testEvery = function (item, modifier, verbosity, tracker) {
    var i;

    for (i = 0; i < item.length; i += 1) {
        item[i] = modifier.assert(item[i], verbosity, tracker.fork(i));
    }

    return item;
};

/**
 * @param {*} item element to be checked against
 * @param {*} modifier item used as additional assertion checker
 * @param {cruks-lib-verbosity-indicator/Verbosity} verbosity message eloquence
 * @param {cruks-lib-config/TraverseTracker} tracker progress observer
 * @returns {void}
 */
ArrayObjectTypeAssertion.prototype.testHas = function (item, modifier, verbosity, tracker) {
    if (-1 === item.indexOf(modifier)) {
        this.throwAssertionFailureException(item, verbosity, tracker);
    }

    return item;
};

module.exports = ArrayObjectTypeAssertion;
