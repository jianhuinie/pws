/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

var path = require("path"),
    Assertion = require(path.join(__dirname, "/../Assertion")),
    StringBuilder = require("cruks-lib-string-builder").StringBuilder;

/**
 * @auguments cruks-lib-config/Testable/Assertion
 * @constructor
 * @param {*} pattern element to be asserted
 */
function ExactAssertion(pattern) {
    Assertion.call(this);

    this.pattern = pattern;
}
ExactAssertion.prototype = Object.create(Assertion.prototype);

ExactAssertion.prototype.getExpectationBaseMessage = function (item, verbosity, isNegated) {
    var message = new StringBuilder(" ", verbosity);

    if (isNegated) {
        message.append("not");
    }

    return message.appendDump(this.pattern);
};

ExactAssertion.prototype.test = function (item, verbosity, tracker) {
    if (typeof this.pattern !== typeof item) {
        this.throwAssertionFailureException(item, verbosity, tracker);
    }

    if (Array.isArray(item)) {
        return this.testArray(item, verbosity, tracker);
    }

    if (typeof item === "object") {
        return this.testObject(item, verbosity, tracker);
    }

    if (this.pattern !== item) {
        this.throwAssertionFailureException(item, verbosity, tracker);
    }

    return item;
};

/**
 * @param {*} item element to be checked against
 * @param {cruks-lib-verbosity-indicator/Verbosity} verbosity message eloquence
 * @param {cruks-lib-config/TraverseTracker} tracker progress observer
 * @returns {void}
 */
ExactAssertion.prototype.testArray = function (item, verbosity, tracker) {
    var i;

    if (this.pattern.length !== item.length) {
        this.throwAssertionFailureException(item, verbosity, tracker);
    }

    for (i = 0; i < item.length; i += 1) {
        item[i] = (new ExactAssertion(this.pattern[i])).assert(item[i], verbosity, tracker.fork(i));
    }

    return item;
};

/**
 * @param {*} item element to be checked against
 * @param {cruks-lib-verbosity-indicator/Verbosity} verbosity message eloquence
 * @param {cruks-lib-config/TraverseTracker} tracker progress observer
 * @returns {void}
 */
ExactAssertion.prototype.testObject = function (item, verbosity, tracker) {
    var property;

    for (property in item) {
        if (item.hasOwnProperty(property)) {
            item[property] = (new ExactAssertion(this.pattern[property])).assert(item[property], verbosity, tracker.fork(property));
        }
    }

    return item;
};

module.exports = ExactAssertion;
