/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

var path = require("path"),
    Assertion = require(path.join(__dirname, "/../Assertion")),
    InstanceOfAssertion = require(path.join(__dirname, "/InstanceOf")),
    StringBuilder = require("cruks-lib-string-builder").StringBuilder,
    Testable = require(path.join(__dirname, "/../../Testable"));

/**
 * @auguments cruks-lib-config/Testable/Assertion
 * @constructor
 * @param {cruks-lib-config/Testable/Assertion} nestedAssertion
 *     nested assertion to check function call result
 */
function OptionalAssertion(nestedAssertion) {
    Assertion.call(this);

    this.nestedAssertion = (new InstanceOfAssertion(Testable)).assert(nestedAssertion);
}
OptionalAssertion.prototype = Object.create(Assertion.prototype);

OptionalAssertion.prototype.getExpectationBaseMessage = function (item, verbosity, isNegated) {
    var message = new StringBuilder(" ", verbosity),
        nestedMessage = this.nestedAssertion.getExpectationBaseMessage(item, verbosity, isNegated);

    if (isNegated) {
        message.append("obligatory");
    } else {
        message.append("optional");
    }

    return message.append(nestedMessage);
};

OptionalAssertion.prototype.test = function (item, verbosity, tracker) {
    if (this.isEmpty(item)) {
        return null;
    }

    if (!this.nestedAssertion.isPassing(item, verbosity, tracker)) {
        this.throwAssertionFailureException(item, verbosity, tracker);
    }

    return item;
};

module.exports = OptionalAssertion;
