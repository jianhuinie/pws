/**
 * @license Copyright (c) 2013, CKSource - Frederico Knabben
 * @license Copyright (c) 2013-2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

var path = require("path"),
    Assertion = require(path.join(__dirname, "Assertion")),
    Testable = require(path.join(__dirname, "/../Testable"));

/**
 * This is the base abstract class for implementing reusable configuration
 * objects.
 *
 * @abstract
 * @auguments cruks-lib-config/Testable
 * @constructor
 */
function Configuration() {
    Testable.call(this);
}
Configuration.prototype = Object.create(Testable.prototype);

Configuration.prototype.assert = function (options, verbosity, tracker) {
    return this.expect().assert(options, verbosity, tracker);
};

/**
 * @abstract
 * @param {cruks-lib-config/expect} expect expectations collection
 * @returns {cruks-lib-config/Testable/Assertion}
 *     general expectation function used at this configuration object
 */
Configuration.prototype.expect = function () {
    return new Assertion();
};

/**
 * @param {*} options element to be checked
 * @param {cruks-lib-verbosity-indicator/Verbosity} verbosity message eloquence
 * @param {cruks-lib-config/TraverseTracker} tracker progress observer
 * @returns {cruks-lib-config/Configuration} chained object
 */
Configuration.prototype.update = function (options, verbosity, tracker) {
    this.data = this.assert(options, verbosity, tracker);

    return this;
};

module.exports = Configuration;
