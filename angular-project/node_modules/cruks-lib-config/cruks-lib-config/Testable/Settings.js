/**
 * @license Copyright (c) 2013, CKSource - Frederico Knabben
 * @license Copyright (c) 2013-2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

var path = require("path"),
    Assertion = require(path.join(__dirname, "Assertion")),
    Testable = require(path.join(__dirname, "/../Testable"));

/**
 * This is the base abstract class for implementing reusable configuration
 * objects.
 *
 * @abstract
 * @auguments cruks-lib-config/Testable
 * @constructor
 * @param {Object} options element to be checked against
 * @param {cruks-lib-verbosity-indicator/Verbosity} [verbosity]
 *     message eloquence
 * @param {cruks-lib-config/TraverseTracker} [tracker] progress observer
 */
function Settings(options, verbosity, tracker) {
    Testable.call(this, verbosity);

    this.update(options, verbosity, tracker);
}
Settings.prototype = Object.create(Testable.prototype);

/**
 * Removes current configuration
 *
 * @returns {void}
 */
Settings.prototype.clear = function () {
    var property;

    for (property in this) {
        if (this.hasOwnProperty(property)) {
            delete this[property];
        }
    }
};

/**
 * @abstract
 * @param {cruks-lib-config/expect} expect expectations collection
 * @returns {cruks-lib-config/Testable/Assertion}
 *     general expectation function used at this configuration object
 */
Settings.prototype.expect = function () {
    return new Assertion();
};

/**
 * @param {Object} options element to be checked against
 * @param {cruks-lib-verbosity-indicator/Verbosity} [verbosity]
 *     message eloquence
 * @param {cruks-lib-config/TraverseTracker} [tracker] progress observer
 * @returns {void}
 */
Settings.prototype.update = function (options, verbosity, tracker) {
    var property;

    options = this.expect().assert(options, verbosity, tracker);

    this.clear();

    for (property in options) {
        if (options.hasOwnProperty(property)) {
            this[property] = options[property];
        }
    }
};

module.exports = Settings;
