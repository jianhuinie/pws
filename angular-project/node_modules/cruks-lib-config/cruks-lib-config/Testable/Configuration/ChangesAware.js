/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

var path = require("path"),
    Configuration = require(path.join(__dirname, "/../Configuration"));

/**
 * This is the base abstract class for implementing reusable configuration
 * objects.
 *
 * @auguments cruks-lib-config/Configuration
 * @constructor
 */
function ChangesAware() {
    var data;

    Configuration.call(this);

    Object.defineProperty(this, "data", {
        /**
         * @returns {*} data currently set
         */
        "get": function () {
            return data;
        },

        /**
         * @param {*} options new set of elements
         * @returns {void}
         */
        "set": function (options) {
            data = this.assert(options, this.tracker);
            data = this.encapsulateConfiguration(data, this);
        }
    });
}
ChangesAware.prototype = Object.create(Configuration.prototype);

/**
 * @param {*} value property value to be described
 * @param {String} name encapsulated property name
 * @returns {Object} property description
 * @see Object.prototype.defineProperty
 */
ChangesAware.prototype.describeConfigurationProperty = function (value) {
    return {
        "enumerable": true,
        "value": value,
        "writable": true
    };
};

/**
 * @param {*} options input element to be encapsulated
 * @returns {Object} encapsulated options used as this.data property
 */
ChangesAware.prototype.encapsulateConfiguration = function (options) {
    var description,
        property,
        ret = {};

    if (typeof options === "object") {
        for (property in options) {
            if (options.hasOwnProperty(property)) {
                description = this.describeConfigurationProperty(this.encapsulateConfiguration(options[property]), property);
                Object.defineProperty(ret, property, description);
            }
        }

        return Object.preventExtensions(ret);
    }

    return options;
};

/**
 * @param {*} options element to be checked
 * @param {cruks-lib-config/TraverseTracker} [tracker]
 *     object used for tracking progress of configuration traversing
 * @returns {cruks-lib-config/Configuration} chained object
 */
ChangesAware.prototype.update = function (options, tracker) {
    this.tracker = tracker;
    this.data = options;

    return this;
};

module.exports = ChangesAware;
