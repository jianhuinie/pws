/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

var path = require("path"),
    AssertionFailureException = require(path.join(__dirname, "/../Exception/AssertionFailure")),
    AssertionSnapshot = require(path.join(__dirname, "/../AssertionSnapshot")),
    StringBuilder = require("cruks-lib-string-builder").StringBuilder,
    Testable = require(path.join(__dirname, "/../Testable")),
    TraverseTracker = require("cruks-lib-traverse-tracker").TraverseTracker,
    VerbosityIndicator = require("cruks-lib-verbosity-indicator").VerbosityIndicator;

/**
 * @auguments cruks-lib-config/Testable
 * @constructor
 */
function Assertion() {
    Testable.call(this);
}
Assertion.prototype = Object.create(Testable.prototype);

Assertion.prototype.assert = function (item, verbosity, tracker) {
    if (this.canUseDefault(item)) {
        item = this.modifiers.default;
    }

    verbosity = new VerbosityIndicator(verbosity);

    if (!(tracker instanceof TraverseTracker)) {
        tracker = new TraverseTracker(tracker);
    }
    tracker.snapshot(new AssertionSnapshot(item));

    if (this.canUseOptional(item, false)) {
        return Testable.prototype.assert.call(this, item, verbosity, tracker);
    }

    item = this.test(item, verbosity, tracker);

    return Testable.prototype.assert.call(this, item, verbosity, tracker);
};

/**
 * @param {*} item element to be checked against
 * @param {cruks-lib-verbosity-indicator/Verbosity} verbosity message eloquence
 * @param {cruks-lib-config/TraverseTracker} tracker progress observer
 * @returns {cruks-lib-config/Exception/AssertionFailureException}
 *     manufactured instance of AssertionFailureException
 */
Assertion.prototype.createAssertionFailureException = function (item, verbosity, tracker) {
    var message = this.getExpectationMessage(item, verbosity);

    return new AssertionFailureException(message, item, verbosity, tracker);
};

/**
 * @param {*} item element to be used as a default value
 * @returns {cruks-lib-config/Testable/Assertion} chained value
 */
Assertion.prototype.default = function (item) {
    this.modifiers.default = this.assert(item);

    return this;
};

/**
 * @abstract
 * @param {*} item element to be checked against
 * @param {cruks-lib-verbosity-indicator/Verbosity} [verbosity]
 *     error messages verbosity
 * @param {Boolean} [isNegated] false by default
 * @returns {cruks-lib-string-builder/StringBuilder} message object
 */
Assertion.prototype.getExpectationBaseMessage = function (item, verbosity /*, isNegated*/ ) {
    return new StringBuilder(" ", verbosity).append("something else");
};

Assertion.prototype.getExpectationMessage = function (item, verbosity, isNegated) {
    var message = this.getExpectationBaseMessage(item, verbosity, isNegated),
        modifierMessage = this.getExpectationModifierMessage(item, verbosity, isNegated),
        optionalMessage = this.getExpectationOptionalMessage(item, verbosity, isNegated);

    if (this.isOptional() && !optionalMessage.isEmpty()) {
        message = optionalMessage.append(message);
    }
    if (!modifierMessage.isEmpty()) {
        message.append("(" + modifierMessage + ")");
    }

    return message;
};

/**
 * @abstract
 * @param {*} item element to be checked against
 * @param {cruks-lib-verbosity-indicator/Verbosity} [verbosity]
 *     error messages verbosity
 * @param {Boolean} [isNegated] false by default
 * @returns {cruks-lib-string-builder/StringBuilder} message object
 */
Assertion.prototype.getExpectationModifierMessage = function (item, verbosity /*, isNegated*/ ) {
    return new StringBuilder(" ", verbosity);
};

/**
 * @abstract
 * @param {*} item element to be checked against
 * @param {cruks-lib-verbosity-indicator/Verbosity} [verbosity]
 *     error messages verbosity
 * @param {Boolean} [isNegated] false by default
 * @returns {cruks-lib-string-builder/StringBuilder} message object
 */
Assertion.prototype.getExpectationOptionalMessage = function (item, verbosity /*, isNegated*/ ) {
    return new StringBuilder(" ", verbosity).append("optional");
};

/**
 * @abstract
 * @param {*} item element to be checked against
 * @param {cruks-lib-verbosity-indicator/Verbosity} verbosity message eloquence
 * @param {cruks-lib-config/TraverseTracker} tracker progress observer
 * @returns {*} input item
 */
Assertion.prototype.test = function (item) {
    return item;
};

/**
 * @param {*} item element to be checked against
 * @param {cruks-lib-verbosity-indicator/Verbosity} verbosity message eloquence
 * @param {cruks-lib-config/TraverseTracker} tracker progress observer
 * @returns {void}
 * @throws {cruks-lib-config/Testable/AssertionFailureException}
 */
Assertion.prototype.throwAssertionFailureException = function (item, verbosity, tracker) {
    throw this.createAssertionFailureException(item, verbosity, tracker);
};

module.exports = Assertion;
