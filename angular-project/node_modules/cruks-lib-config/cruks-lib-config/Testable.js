/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

var path = require("path"),
    AssertionFailureException = require(path.join(__dirname, "/Exception/AssertionFailure"));

/**
 * @auguments cruks-lib-config/Testable
 * @constructor
 */
function Testable() {
    this.modifiers = {};
}
Testable.prototype = Object.create(Testable.prototype);

/**
 * @param {cruks-lib-config/Testable} and additional assertion
 * @returns {cruks-lib-config/Testable} chained object
 */
Testable.prototype.and = function (and) {
    this.modifiers.and = and;

    return this;
};

/**
 * @param {*} item element to be checked against
 * @param {cruks-lib-verbosity-indicator/Verbosity} verbosity message eloquence
 * @param {cruks-lib-config/TraverseTracker} tracker progress observer
 * @returns {*} returns input element if everything goes well
 */
Testable.prototype.assert = function (item, verbosity, tracker) {
    if (this.modifiers.normalize) {
        item = this.modifiers.normalize.call(null, item, verbosity, tracker);
    }

    if (this.modifiers.and) {
        item = this.modifiers.and.assert(item, verbosity, tracker);
    }

    if (this.modifiers.not && this.modifiers.not.isPassing(item, verbosity, tracker)) {
        throw new AssertionFailureException(this.modifiers.not.getExpectationMessage(item, verbosity, tracker), item, verbosity, tracker);
    }

    return item;
};

/**
 * @param {*} item current user input item
 * @return {Boolean} true if default value can be used, false otherwise
 */
Testable.prototype.canUseDefault = function (item) {
    return this.isEmpty(item) && this.modifiers.hasOwnProperty("default");
};

/**
 * @param {*} item current user input item
 * @param {Boolean} isOwnProperty
 *     true if item is an own part of parent object, false otherwise
 * @return {Boolean} true if default value can be used, false otherwise
 */
Testable.prototype.canUseOptional = function (item, isOwnProperty) {
    return this.isEmpty(item, isOwnProperty) && this.isOptional();
};

/**
 * @abstract
 * @param {*} item element to be checked against
 * @param {cruks-lib-verbosity-indicator/Verbosity} [verbosity]
 *     error messages verbosity
 * @param {Boolean} [isNegated] false by default
 * @returns {String} formatted message
 */
Testable.prototype.getExpectationMessage = function (item, verbosity /*, isNegated*/ ) {
    return "something";
};

/**
 * @param {*} item element to be checked against
 * @param {Boolean} isOwnProperty
 *     true if item is an own part of parent object, false otherwise
 * @returns {Boolean} true if given item is empty, false otherwise
 */
Testable.prototype.isEmpty = function (item /*, isOwnProperty*/ ) {
    return !item;
};

/**
 * @returns {Boolean} true if testable is optional, false otherwise
 */
Testable.prototype.isOptional = function () {
    return !!this.modifiers.optional;
};

/**
 * @param {*} item element to be checked against
 * @param {cruks-lib-verbosity-indicator/Verbosity} verbosity message eloquence
 * @param {cruks-lib-config/TraverseTracker} tracker progress observer
 * @returns {Boolean} true if given item fulfills assertion, false otherwise
 */
Testable.prototype.isPassing = function (item, verbosity, tracker) {
    try {
        this.assert(item, verbosity, tracker);
    } catch (e) {
        if (e instanceof AssertionFailureException) {
            return false;
        }

        throw e;
    }

    return true;
};

/**
 * @param {Function} [normalize] normalizing object
 * @returns {cruks-lib-config/Testable} chained object
 */
Testable.prototype.normalize = function (normalize) {
    this.modifiers.normalize = normalize;

    return this;
};

/**
 * @param {cruks-lib-config/Testable} not additional assertion
 * @returns {cruks-lib-config/Testable} chained object
 */
Testable.prototype.not = function (not) {
    this.modifiers.not = not;

    return this;
};

/**
 * @param {Boolean} [isOptional] determines if assertion is optional, true by default
 * @returns {cruks-lib-config/Testable/Assertion} chained object
 */
Testable.prototype.optional = function (isOptional) {
    if (arguments.length < 1) {
        isOptional = true;
    }

    this.modifiers.optional = isOptional;

    return this;
};

module.exports = Testable;
