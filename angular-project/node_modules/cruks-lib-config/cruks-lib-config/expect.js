/**
 * @license Copyright (c) 2013, CKSource - Frederico Knabben
 * @license Copyright (c) 2013-2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

var path = require("path"),
    AnythingAssertion = require(path.join(__dirname, "/Testable/Assertion/Anything")),
    ArrayObjectTypeAssertion = require(path.join(__dirname, "/Testable/Assertion/Type/Object/Array")),
    BooleanTypeAssertion = require(path.join(__dirname, "/Testable/Assertion/Type/Boolean")),
    ChildOfAssertion = require(path.join(__dirname, "/Testable/Assertion/ChildOf")),
    CustomAssertion = require(path.join(__dirname, "/Testable/Assertion/Custom")),
    DateStringTypeAssertion = require(path.join(__dirname, "/Testable/Assertion/Type/String/Date")),
    DefaultAssertion = require(path.join(__dirname, "/Testable/Assertion/Anything/Default")),
    EmptyAssertion = require(path.join(__dirname, "/Testable/Assertion/Empty")),
    EnumAssertion = require(path.join(__dirname, "/Testable/Assertion/Enum")),
    EveryAssertion = require(path.join(__dirname, "/Testable/Assertion/Every")),
    ExactAssertion = require(path.join(__dirname, "/Testable/Assertion/Exact")),
    FunctionTypeAssertion = require(path.join(__dirname, "/Testable/Assertion/Type/Function")),
    InstanceOfAssertion = require(path.join(__dirname, "/Testable/Assertion/InstanceOf")),
    IntegerNumberTypeAssertion = require(path.join(__dirname, "/Testable/Assertion/Type/Number/Integer")),
    KeyAssertion = require(path.join(__dirname, "/Testable/Assertion/Key")),
    MapAssertion = require(path.join(__dirname, "/Testable/Assertion/Map")),
    NegatedAssertion = require(path.join(__dirname, "/Testable/Assertion/Negated")),
    NumberTypeAssertion = require(path.join(__dirname, "/Testable/Assertion/Type/Number")),
    ObjectTypeAssertion = require(path.join(__dirname, "/Testable/Assertion/Type/Object")),
    OptionalAssertion = require(path.join(__dirname, "/Testable/Assertion/Optional")),
    PrimitiveTypeAssertion = require(path.join(__dirname, "/Testable/Assertion/Type/Primitive")),
    RegExpObjectTypeAssertion = require(path.join(__dirname, "/Testable/Assertion/Type/Object/RegExp")),
    SchemaAssertion = require(path.join(__dirname, "/Testable/Assertion/Schema")),
    SomeAssertion = require(path.join(__dirname, "/Testable/Assertion/Some")),
    StringTypeAssertion = require(path.join(__dirname, "/Testable/Assertion/Type/String")),
    SymbolTypeAssertion = require(path.join(__dirname, "/Testable/Assertion/Type/Symbol")),
    TypeAssertion = require(path.join(__dirname, "/Testable/Assertion/Type"));

module.exports = {
    /**
     * @returns {cruks-lib-config/Testable/Assertion} validator instance
     */
    "anything": function () {
        return new AnythingAssertion();
    },

    /**
     * @returns {cruks-lib-config/Testable/Assertion} validator instance
     */
    "array": function () {
        return new ArrayObjectTypeAssertion();
    },

    /**
     * @returns {cruks-lib-config/Testable/Assertion} validator instance
     */
    "boolean": function () {
        return new BooleanTypeAssertion();
    },

    /**
     * @param {Function} Parent parent object constructor
     * @returns {cruks-lib-config/Testable/Assertion} validator instance
     */
    "childOf": function (Parent) {
        return new ChildOfAssertion(Parent);
    },

    /**
     * @param {Function} validator item used as internal assertion validator
     * @param {String} [message] optional expectations message
     * @returns {cruks-lib-config/Testable/Assertion} validator instance
     */
    "custom": function (validator, message) {
        return new CustomAssertion(validator, message);
    },

    /**
     * @returns {cruks-lib-config/Testable/Assertion/Type/String/Date} validator instance
     */
    "date": function () {
        return new DateStringTypeAssertion();
    },

    /**
     * @param {*} item element to be used as a default value
     * @returns {cruks-lib-config/Testable/Assertion} chained value
     */
    "default": function (item) {
        return new DefaultAssertion(item);
    },

    /**
     * @returns {cruks-lib-config/Testable/Assertion} validator instance
     */
    "empty": function () {
        return new EmptyAssertion();
    },

    /**
     * @param {Array} enumeration list of enumeration values
     * @returns {cruks-lib-config/Testable/Assertion} validator instance
     */
    "enum": function (enumeration) {
        return new EnumAssertion(enumeration);
    },

    /**
     * @param {Array} expectations list of expectations to be applied
     * @returns {cruks-lib-config/Testable/Assertion} validator instance
     */
    "every": function (expectations) {
        return new EveryAssertion(expectations);
    },

    /**
     * @param {*} pattern element to be checked against
     * @returns {cruks-lib-config/Testable/Assertion} validator instance
     */
    "exact": function (pattern) {
        return new ExactAssertion(pattern);
    },

    /**
     * @returns {cruks-lib-config/Testable/Assertion} validator instance
     */
    "function": function () {
        return new FunctionTypeAssertion();
    },

    /**
     * @param {Function} Parent parent object constructor
     * @returns {cruks-lib-config/Testable/Assertion} validator instance
     */
    "instanceOf": function (Parent) {
        return new InstanceOfAssertion(Parent);
    },

    /**
     * @returns {cruks-lib-config/Testable/Assertion} validator instance
     */
    "integer": function () {
        return new IntegerNumberTypeAssertion();
    },

    /**
     * @returns {cruks-lib-config/Testable/Assertion} validator instance
     */
    "key": function () {
        return new KeyAssertion();
    },

    /**
     * @param {Expectation} expectation function be used as validator
     * @returns {cruks-lib-config/Testable/Assertion} validator instance
     */
    "map": function (expectation) {
        return new MapAssertion(expectation);
    },

    /**
     * @param {Expectation} expectation function be used as validator
     * @returns {cruks-lib-config/Testable/Assertion} validator instance
     */
    "not": function (expectation) {
        return new NegatedAssertion(expectation);
    },

    /**
     * @returns {cruks-lib-config/Testable/Assertion} validator instance
     */
    "number": function () {
        return new NumberTypeAssertion();
    },

    /**
     * @returns {cruks-lib-config/Testable/Assertion} validator instance
     */
    "object": function () {
        return new ObjectTypeAssertion();
    },

    /**
     * @param {Expectation} expectation function be used as validator
     * @returns {cruks-lib-config/Testable/Assertion} validator instance
     */
    "optional": function (expectation) {
        return new OptionalAssertion(expectation);
    },

    /**
     * @returns {cruks-lib-config/Testable/Assertion} validator instance
     */
    "primitive": function () {
        return new PrimitiveTypeAssertion();
    },

    /**
     * @returns {cruks-lib-config/Testable/Assertion} validator instance
     */
    "regexp": function () {
        return new RegExpObjectTypeAssertion();
    },

    /**
     * @param {Object} schema map of further expectations
     * @returns {Object} validated input value
     */
    "schema": function (schema) {
        return new SchemaAssertion(schema);
    },

    /**
     * @param {Array} expectations list of expectations to be applied
     * @returns {cruks-lib-config/Testable/Assertion} validator instance
     */
    "some": function (expectations) {
        return new SomeAssertion(expectations);
    },

    /**
     * @returns {cruks-lib-config/Testable/Assertion} validator instance
     */
    "string": function () {
        return new StringTypeAssertion();
    },

    /**
     * @returns {cruks-lib-config/Testable/Assertion} validator instance
     */
    "symbol": function () {
        return new SymbolTypeAssertion();
    },

    /**
     * @param {String} type expected type
     * @returns {cruks-lib-config/Testable/Assertion} validator instance
     */
    "type": function (type) {
        return new TypeAssertion(type);
    }
};
