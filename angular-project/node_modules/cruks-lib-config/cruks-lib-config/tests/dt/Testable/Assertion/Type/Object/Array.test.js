/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

/*global describe: false, it: false */

var assert = require("chai").assert,
    ArrayObjectTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/Object/Array"),
    AssertionFailureException = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Exception/AssertionFailure"),
    IntegerNumberTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/Number/Integer"),
    SchemaAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Schema"),
    StringTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/String");

describe("cruks-lib-config/Testable/Assertion/Array", function () {
    describe("#assert()", function () {
        describe("#default()", function () {
            it("validates input agains an array", function () {
                assert.deepEqual([0, 0, 1], new ArrayObjectTypeAssertion().default([0, 0, 1]).assert(null));
            });

            it("validates that non-empty array is returned", function () {
                assert.deepEqual([0, 1, 1], new ArrayObjectTypeAssertion().default([0, 0, 1]).assert([0, 1, 1]));
            });
        });

        describe("#every()", function () {
            it("checks input type", function () {
                var input;

                input = [{
                    "key1": "value1",
                    "key2": 12
                }];

                assert.strictEqual(input, new ArrayObjectTypeAssertion().every(new SchemaAssertion({
                    "key1": new StringTypeAssertion().matching(/^value1$/),
                    "key2": new IntegerNumberTypeAssertion()
                })).assert(input));
            });
        });

        describe("#has()", function () {
            it("asserts that array does not have value", function () {
                var input;

                input = ["value1"];

                assert.throws(function () {
                    new ArrayObjectTypeAssertion().has("value2").assert(input);
                }, AssertionFailureException, "expected array (having (string)\"value2\") but got array");
            });

            it("asserts that array has value", function () {
                var input;

                input = ["value1"];
                assert.strictEqual(input, new ArrayObjectTypeAssertion().has("value1").assert(input));
            });
        });

        describe("#length()", function () {
            it("validates input agains an array", function () {
                assert.deepEqual([0, 1, 0], new ArrayObjectTypeAssertion().length(3).assert([0, 1, 0]));
            });

            it("validates length range", function () {
                assert.deepEqual([0, 1, 1], new ArrayObjectTypeAssertion().length(new IntegerNumberTypeAssertion().range(1, 3)).assert([0, 1, 1]));
            });

            it("fails when length is incorrect", function () {
                assert.throws(function () {
                    new ArrayObjectTypeAssertion().length(4).assert([0, 1, 0]);
                }, AssertionFailureException, "expected array (with \"length\" of (number)\"4\") but \"length\" got (number)\"3\"");
            });

            it("fails when length with internal assertion is incorrect", function () {
                assert.throws(function () {
                    new ArrayObjectTypeAssertion().length(new IntegerNumberTypeAssertion().range(1, 3)).assert([0, 1, 0, 1]);
                }, AssertionFailureException, "expected array (with \"length\" of integer (between (number)\"1\" and (number)\"3\")) but \"length\" got (number)\"4\"");
            });
        });

        it("asserts that given item represents given type", function () {
            var aa = new ArrayObjectTypeAssertion(),
                fs = [1, 2, 3];

            assert.strictEqual(fs, aa.assert(fs));
        });
    });

    describe("#default()", function () {
        it("fails when no default value is given", function () {
            var aa = new ArrayObjectTypeAssertion();

            assert.throws(function () {
                aa.assert(null);
            }, AssertionFailureException, "expected array but got (object)\"null\"");
        });

        it("empty array does not make default value to be used", function () {
            var aa = (new ArrayObjectTypeAssertion()).default([1, 2]);

            assert.deepEqual([], aa.assert([]));
        });

        it("uses default value on empty input", function () {
            var aa = (new ArrayObjectTypeAssertion()).default([1, 2]);

            assert.deepEqual([1, 2], aa.assert(null));
        });
    });

    describe("#has()", function () {
        var aa = new ArrayObjectTypeAssertion();

        it("checks if array contains given item", function () {
            var fs = [1, 2, 3];

            assert.strictEqual(fs, aa.has(3).assert(fs));
        });

        it("fails when array does not contain given item", function () {
            var fs = [1, 2, 3];

            assert.throws(function () {
                aa.has(4).assert(fs);
            }, AssertionFailureException, "expected array (having (number)\"4\") but got array");
        });
    });

    describe("#length()", function () {
        var aa = new ArrayObjectTypeAssertion();

        it("checks if array matches given length", function () {
            var fs = [1, 2, 3];

            assert.strictEqual(fs, aa.length(3).assert(fs));
        });

        it("fails when array does not have given length", function () {
            var fs = [1, 2, 3];

            assert.throws(function () {
                aa.length(4).assert(fs);
            }, AssertionFailureException, "expected array (with \"length\" of (number)\"4\") but \"length\" got (number)\"3\"");
        });
    });
});
