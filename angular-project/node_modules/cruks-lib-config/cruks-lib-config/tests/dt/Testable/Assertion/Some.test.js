/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

/*global describe: false, it: false */

var assert = require("chai").assert,
    AssertionFailureException = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Exception/AssertionFailure"),
    CustomAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Custom"),
    IntegerNumberTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/Number/Integer"),
    NumberTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/Number"),
    ObjectTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/Object"),
    SomeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Some"),
    StringTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/String");

describe("cruks-lib-config/Testable/Assertion/Some", function () {
    describe("#assert()", function () {
        var ea = new SomeAssertion([
            new NumberTypeAssertion().lt(5).gt(3),
            new StringTypeAssertion()
        ]);

        describe("asserts that any condition is fulfilled", function () {
            assert.strictEqual(4, ea.assert(4));
            assert.strictEqual("some-string", ea.assert("some-string"));
        });

        it("fails when any condition is failed", function () {
            assert.throws(function () {
                ea.assert(6);
            }, AssertionFailureException);
        });

        it("generates accurate exception message", function () {
            assert.throws(function () {
                ea.assert(5);
            }, AssertionFailureException, "expected number (greater than (number)\"3\" and less than (number)\"5\") or string but got (number)\"5\"");
        });

        it("aggregates exceptions", function () {
            assert.throws(function () {
                assert.strictEqual("foo", new SomeAssertion([
                    new IntegerNumberTypeAssertion(),
                    new ObjectTypeAssertion()
                ]).assert("foo"));
            }, AssertionFailureException, "expected integer or object but got (string)\"foo\"");
        });

        it("does not intercept exceptions not connected with config", function () {
            assert.throws(function () {
                assert.strictEqual("foo", new SomeAssertion([
                    new CustomAssertion(function (item, AssertionError) {
                        throw new AssertionError();
                    })
                ]).assert("foo"));
            }, AssertionFailureException, "expected something else but got (string)\"foo\"");
        });
    });

    describe("#default()", function () {
        it("picks default value", function () {
            assert.strictEqual("foo", new SomeAssertion([
                new ObjectTypeAssertion(),
                new StringTypeAssertion()
            ]).default("foo").assert(null));
        });

        it("picks input value", function () {
            assert.strictEqual("bar", new SomeAssertion([
                new ObjectTypeAssertion(),
                new StringTypeAssertion()
            ]).default("foo").assert("bar"));
        });
    });

    describe("#normalize()", function () {
        it("accepts normalized value", function () {
            assert.deepEqual({
                "item": "bar"
            }, new SomeAssertion([
                    new ObjectTypeAssertion(),
                    new StringTypeAssertion().normalize(function (item) {
                        return {
                            "item": item
                        };
                    })
                ]).assert("bar"));
        });
    });
});
