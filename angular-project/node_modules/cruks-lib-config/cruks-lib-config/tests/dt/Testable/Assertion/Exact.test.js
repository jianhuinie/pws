/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

/*global describe: false, it: false */

var assert = require("chai").assert,
    AssertionFailureException = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Exception/AssertionFailure"),
    ExactAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Exact"),
    VerbosityIndicator = require("cruks-lib-verbosity-indicator").VerbosityIndicator;

describe("cruks-lib-config/Testable/Assertion/Exact", function () {
    describe("#assert()", function () {
        it("asserts that given item is exactly expected one", function () {
            var ea = new ExactAssertion(3),
                fs = 3;

            assert.strictEqual(fs, ea.assert(fs));
        });

        describe("~array", function () {
            it("checks arrays", function () {
                var ea = new ExactAssertion([1, 2, 3]),
                    fs = [1, 2, 3];

                assert.strictEqual(fs, ea.assert(fs));
            });

            it("fails when arrays do not match", function () {
                var ea = new ExactAssertion([4, 5, 6]),
                    fs = [1, 2, 3];

                assert.throws(function () {
                    ea.assert(fs);
                }, AssertionFailureException, "expected (number)\"4\" but \"0\" got (number)\"1\"");
            });
        });

        describe("~object", function () {
            it("checks objects", function () {
                var ea = new ExactAssertion({
                        "a": 1,
                        "b": 2,
                        "c": {
                            "d": 3,
                            "e": {
                                "f": 4
                            }
                        },
                        "g": 5
                    }),
                    fs = {
                        "a": 1,
                        "b": 2,
                        "c": {
                            "d": 3,
                            "e": {
                                "f": 4
                            }
                        },
                        "g": 5
                    };

                assert.strictEqual(fs, ea.assert(fs));
            });

            it("fails when objects do not match", function () {
                var ea = new ExactAssertion({
                    "a": 1,
                    "b": {
                        "c": 2
                    }
                });

                assert.throws(function () {
                    ea.assert({
                        "a": 1,
                        "b": {
                            "c": 3
                        }
                    });
                }, AssertionFailureException, "expected (number)\"2\" but \"b.c\" got (number)\"3\"");
            });
        });

        it("fails when passed item is different", function () {
            var ea = new ExactAssertion(3),
                fs = "not-an-input";

            assert.throws(function () {
                ea.assert(fs);
            }, AssertionFailureException, "expected (number)\"3\" but got (string)\"not-an-input\"");
        });

        describe("respects message verbosity", function () {
            it("uses normal verbosity", function () {
                var ea = new ExactAssertion(3),
                    fs = [1, 2, 3];

                assert.throws(function () {
                    ea.assert(fs);
                }, AssertionFailureException, "expected (number)\"3\" but got array");
            });

            it("uses verbose verbosity", function () {
                var ea = new ExactAssertion(3),
                    fs = [1, "2", [3]];

                assert.throws(function () {
                    ea.assert(fs, new VerbosityIndicator(VerbosityIndicator.VERBOSITY_VERBOSE));
                }, AssertionFailureException, "expected (number)\"3\" but got (array)[(number)\"1\",(string)\"2\",array]");
            });
        });

        it("throws error if other string value given", function () {
            assert.throws(function () {
                new ExactAssertion("foo").assert("bar");
            }, AssertionFailureException, "expected (string)\"foo\" but got (string)\"bar\"");
        });
    });

    describe("#default()", function () {
        it("picks default value", function () {
            assert.strictEqual("foo", new ExactAssertion("foo").default("foo").assert(null));
        });

        it("picks input value", function () {
            assert.strictEqual("foo", new ExactAssertion("foo").default("foo").assert("foo"));
        });
    });
});
