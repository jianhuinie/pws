/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

/*global describe: false, it: false */

var assert = require("chai").assert,
    AssertionFailureException = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Exception/AssertionFailure"),
    ExactAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Exact"),
    StringTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/String");

describe("cruks-lib-config/Testable/Assertion/Type/String", function () {
    describe("#and()", function () {
        it("picks input value", function () {
            var expectation;

            expectation = new StringTypeAssertion().and(new ExactAssertion("foo"));

            assert.throws(function () {
                expectation.assert("bar");
            }, AssertionFailureException, "expected (string)\"foo\" but got (string)\"bar\"");
        });
    });

    describe("#default()", function () {
        it("picks default value", function () {
            assert.strictEqual("foo", new StringTypeAssertion().default("foo").assert());
        });

        it("picks input value", function () {
            assert.strictEqual("bar", new StringTypeAssertion().default("foo").assert("bar"));
        });
    });

    describe("#not()", function () {
        it("picks input value", function () {
            var expectation;

            expectation = new StringTypeAssertion().not(new ExactAssertion("foo"));

            assert.throws(function () {
                expectation.assert("foo");
            }, AssertionFailureException, "expected not (string)\"foo\" but got (string)\"foo\"");
        });
    });

    describe("#optional()", function () {
        it("fails on invalid value", function () {
            assert.throws(function () {
                new StringTypeAssertion().optional().assert(123);
            }, AssertionFailureException, "expected optional string but got (number)\"123\"");
        });

        it("picks input value", function () {
            var input = "testValue";

            assert.equal(input, new StringTypeAssertion().optional().assert(input));
        });

        it("picks empty value", function () {
            assert.equal(null, new StringTypeAssertion().optional().assert(null));
        });
    });

    describe("#matching()", function () {
        describe("#default()", function () {
            it("picks default value", function () {
                assert.strictEqual("foo", new StringTypeAssertion().matching(/fo+/).default("foo").assert(null));
            });

            it("picks input value", function () {
                assert.strictEqual("fooo", new StringTypeAssertion().matching(/fo+/).default("foo").assert("fooo"));
            });

            it("fails when default value does not match regular expression", function () {
                assert.throws(function () {
                    new StringTypeAssertion().matching(/fo+/).default("bar").assert(null);
                }, AssertionFailureException, "expected string (matching (regexp)\"/fo+/\") but got (string)\"bar\"");
            });
        });

        it("validates input against a string", function () {
            assert.strictEqual("foo", new StringTypeAssertion().matching(/foo/).assert("foo"));
        });
    });
});
