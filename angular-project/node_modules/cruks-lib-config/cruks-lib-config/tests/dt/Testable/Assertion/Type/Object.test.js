/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

/*global describe: false, it: false */

var assert = require("chai").assert,
    ArrayObjectTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/Object/Array"),
    AssertionFailureException = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Exception/AssertionFailure"),
    ObjectTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/Object"),
    StringTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/String");

describe("cruks-lib-config/Testable/Assertion/Type/Object", function () {
    describe("#default()", function () {
        var dft = {
                "a": 5
            },
            ota = (new ObjectTypeAssertion()).default(dft);

        it("picks input value", function () {
            var input = {
                "b": 10
            };

            assert.strictEqual(input, ota.assert(input));
        });

        it("picks default value", function () {
            assert.strictEqual(dft, ota.assert({}));
        });
    });

    describe("#doesNotIncludeKey()", function () {
        it("asserts that objects does not have given key", function () {
            var input = {
                    "a": 1
                },
                ota = new ObjectTypeAssertion().doesNotIncludeKey("a");

            assert.throws(function () {
                ota.assert(input);
            }, AssertionFailureException, "expected object (not including keys (array)[(string)\"a\"]) but got object");
        });

        it("can be called multiple times", function () {
            var ota = new ObjectTypeAssertion();

            ota.doesNotIncludeKey("a").doesNotIncludeKey("b");

            assert.throws(function () {
                ota.assert({
                    "a": 1
                });
            }, AssertionFailureException, "expected object (not including keys (array)[(string)\"a\",(string)\"b\"]) but got object");

            assert.throws(function () {
                ota.assert({
                    "b": 2
                });
            }, AssertionFailureException, "expected object (not including keys (array)[(string)\"a\",(string)\"b\"]) but got object");

            assert.doesNotThrow(function () {
                ota.assert({
                    "c": 3
                });
            });
        });
    });

    describe("#exactKeys()", function () {
        var ota = new ObjectTypeAssertion().exactKeys(["a", "b"]);

        it("expects exact collection of keys", function () {
            var input = {
                "a": "b",
                "b": 10
            };

            assert.strictEqual(input, ota.assert(input));
        });

        it("fails when keys do not match expected list", function () {
            var input = {
                "a": "b",
                "b": 10,
                "c": undefined
            };

            assert.throws(function () {
                ota.assert(input);
            }, AssertionFailureException, "expected object (with exact keys (array)[(string)\"a\",(string)\"b\"]) but got object");
        });
    });

    describe("#includesKey()", function () {
        it("asserts that objects has given key", function () {
            var input = {
                    "a": 1
                },
                ota = new ObjectTypeAssertion().includesKey("a");

            assert.strictEqual(input, ota.assert(input));
        });

        it("asserts that object does not have all required keys", function () {
            var input;

            input = {
                "key1": "value1",
                "key2": "value2"
            };

            assert.throws(function () {
                new ObjectTypeAssertion().includesKeys(["key1", "key2", "key3"]).assert(input);
            }, AssertionFailureException, "expected object (including keys (array)[(string)\"key1\",(string)\"key2\",(string)\"key3\"]) but got object");
        });

        it("can be called multiple times", function () {
            var input = {
                    "a": 1,
                    "b": 2,
                    "c": 3
                },
                ota = new ObjectTypeAssertion();

            ota.includesKey("a").includesKey("b");

            assert.strictEqual(input, ota.assert(input));
        });

        it("fails when key is missing", function () {
            var input = {
                    "b": 2
                },
                ota = new ObjectTypeAssertion().includesKey("a");

            assert.throws(function () {
                ota.assert(input);
            }, AssertionFailureException, "expected object (including keys (array)[(string)\"a\"]) but got object");
        });
    });

    describe("#includesKeys()", function () {
        var ota = new ObjectTypeAssertion().includesKeys(["a", "b", "c"]);

        it("asserts that objects has all given keys", function () {
            var input = {
                "a": 1,
                "b": 2,
                "c": 3
            };

            assert.strictEqual(input, ota.assert(input));
        });

        it("fails when some keys are missing", function () {
            var input = {
                "a": 1,
                "c": 2
            };

            assert.throws(function () {
                ota.assert(input);
            }, AssertionFailureException, "expected object (including keys (array)[(string)\"a\",(string)\"b\",(string)\"c\"]) but got object");
        });
    });

    describe("#values()", function () {
        var ota = new ObjectTypeAssertion().values(new ArrayObjectTypeAssertion().every(new StringTypeAssertion()));

        it("validates object values", function () {
            var input = {
                "foo": "hello",
                "bar": "world"
            };

            assert.deepEqual(input, ota.assert(input));
        });

        it("fails when assertion does not match", function () {
            var input = {
                "foo": "hello",
                "bar": 5,
                "baz": "world"
            };

            assert.throws(function () {
                ota.assert(input);
            }, AssertionFailureException, "expected string but \"bar\" got (number)\"5\"");
        });
    });
});
