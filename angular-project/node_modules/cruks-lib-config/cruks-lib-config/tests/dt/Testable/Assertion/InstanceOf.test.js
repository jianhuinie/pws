/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

/*global describe: false, it: false */

var assert = require("chai").assert,
    AssertionFailureException = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Exception/AssertionFailure"),
    InstanceOfAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/InstanceOf"),
    SchemaAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Schema");

describe("cruks-lib-config/Testable/Assertion/InstanceOf", function () {
    function Parent() {
    }

    function Child() {
        Parent.call(this);
    }
    Child.prototype = Object.create(Parent.prototype);

    describe("#assert()", function () {
        var ia = new InstanceOfAssertion(Parent);

        it("asserts that given item represents given type", function () {
            var instance = new Child();

            assert.strictEqual(instance, ia.assert(instance));
        });

        it("fails otherwise", function () {
            assert.throws(function () {
                ia.assert(Child);
            }, AssertionFailureException, "expected instance of (function)\"Parent\" but got (function)\"Child\"");
        });

        it("fails when item is not an instance of parent", function () {
            assert.throws(function () {
                new InstanceOfAssertion(function () {}).assert(function () {});
            }, AssertionFailureException, "expected instance of function but got function");
        });

        it("fails when parent is not a function", function () {
            assert.throws(function () {
                new InstanceOfAssertion({}).assert(function () {});
            }, AssertionFailureException, "expected function but got object");
        });
    });

    describe("#default()", function () {
        it("picks default value", function () {
            var correct,
                child1,
                input,
                output;

            function Parent() {
            }

            function Child() {
            }
            Child.prototype = Object.create(Parent.prototype);
            child1 = new Child();

            input = {
                "key1": undefined
            };

            correct = {
                "key1": child1
            };

            output = new SchemaAssertion({
                "key1": new InstanceOfAssertion(Parent).default(child1)
            }).assert(input);

            assert.deepEqual(output, correct);
            assert.strictEqual(output.key1, correct.key1);
        });

        it("picks input value", function () {
            var correct,
                child1,
                child2,
                input,
                output;

            function Parent() {
            }

            function Child() {
            }
            Child.prototype = Object.create(Parent.prototype);
            child1 = new Child();
            child2 = new Child();

            input = {
                "key1": child2
            };

            correct = {
                "key1": child2
            };

            output = new SchemaAssertion({
                "key1": new InstanceOfAssertion(Parent).default(child1)
            }).assert(input);

            assert.deepEqual(output, correct);
            assert.strictEqual(output.key1, correct.key1);
        });
    });
});
