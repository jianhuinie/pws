/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

/*global describe: false, it: false */

var assert = require("chai").assert,
    AssertionFailureException = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Exception/AssertionFailure"),
    CustomAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Custom"),
    verbosity = require("cruks-lib-verbosity-indicator").verbosity;

describe("cruks-lib-config/Testable/Assertion/Custom", function () {
    describe("#assert()", function () {
        var ca = new CustomAssertion(function (item, AssertionError) {
            if (typeof item !== "string" || parseInt(item, 10) !== 5) {
                throw new AssertionError("some weird number");
            }

            return item;
        });

        it("asserts that fulfills custom assertion", function () {
            assert.strictEqual("5", ca.assert("5"));
        });

        it("fails when item does not fultill custom assertion", function () {
            assert.throws(function () {
                ca.assert(5);
            }, AssertionFailureException, "expected some weird number but got (number)\"5\"");
        });

        it("respects message verbosity", function () {
            assert.throws(function () {
                ca.assert(5, verbosity.quiet());
            }, AssertionFailureException, "");
        });
    });
});
