/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

/*global describe: false, it: false */

var assert = require("chai").assert,
    ArrayObjectTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/Object/Array"),
    AssertionFailureException = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Exception/AssertionFailure"),
    BooleanTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/Boolean"),
    NumberTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/Number"),
    OptionalAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Optional"),
    SchemaAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Schema"),
    SomeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Some"),
    StringTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/String"),
    VerbosityIndicator = require("cruks-lib-verbosity-indicator").VerbosityIndicator;

describe("cruks-lib-config/Testable/Assertion/Schema", function () {
    describe("#assert()", function () {
        var sa = new SchemaAssertion({
            "a": new NumberTypeAssertion(),
            "b": new StringTypeAssertion(),
            "c": new SchemaAssertion({
                "d": new SchemaAssertion({
                    "e": new BooleanTypeAssertion()
                })
            }),
            "f": new ArrayObjectTypeAssertion()
        });

        it("asserts that given input matches schema", function () {
            var input = {
                "a": 5,
                "b": "some-string",
                "c": {
                    "d": {
                        "e": false
                    }
                },
                "f": []
            };

            assert.strictEqual(input, sa.assert(input));
        });

        it("fails otherwise", function () {
            assert.throws(function () {
                sa.assert({
                    "a": 5,
                    "b": "some-string",
                    "c": {
                        "d": {
                            "e": "not-a-boolean"
                        }
                    },
                    "f": []
                });
            }, AssertionFailureException, "expected boolean but \"c.d.e\" got (string)\"not-a-boolean\"");
        });

        it("fails on types other than objects", function () {
            assert.throws(function () {
                sa.assert(5);
            }, AssertionFailureException, "expected object and not array but got (number)\"5\"");
        });

        it("checks default value and input value to match schema", function () {
            assert.throws(function () {
                new SchemaAssertion({
                    "key1": new NumberTypeAssertion().default("not-a-number")
                }).assert({});
            }, AssertionFailureException, "expected number but got (string)\"not-a-number\"");
        });

        it("skips optional fields", function () {
            var expectMySchema = new SchemaAssertion({
                "foo": new StringTypeAssertion(),
                "bar": new StringTypeAssertion().optional(),
                "baz": new StringTypeAssertion().optional()
            });

            assert.deepEqual({
                "foo": "some-string"
            }, expectMySchema.assert({
                    "foo": "some-string"
                }));
        });

        describe("respects message verbosity", function () {
            var incorrect = {
                "a": 5,
                "b": "some-string",
                "c": {
                    "d": [1, 2, 3]
                }
            };

            it("uses quiet message verbosity", function () {
                assert.throws(function () {
                    sa.assert(incorrect, new VerbosityIndicator(VerbosityIndicator.VERBOSITY_QUIET));
                }, "");
            });

            it("uses normal message verbosity", function () {
                assert.throws(function () {
                    sa.assert(incorrect, new VerbosityIndicator(VerbosityIndicator.VERBOSITY_NORMAL));
                }, AssertionFailureException, "expected object and not array but \"c.d\" got array");
            });

            it("uses verbose message verbosity", function () {
                assert.throws(function () {
                    sa.assert(incorrect, new VerbosityIndicator(VerbosityIndicator.VERBOSITY_VERBOSE));
                }, AssertionFailureException, "expected object and not array but \"c.d\" got (array)[(number)\"1\",(number)\"2\",(number)\"3\"]");
            });
        });

        it("identifies empty items correctly (#1)", function () {
            var assertConfiguration,
                assertOptionsConfiguration;

            assertOptionsConfiguration = new SchemaAssertion({
                "urlList": new SomeAssertion([
                    new StringTypeAssertion(),
                    new ArrayObjectTypeAssertion().every(new StringTypeAssertion())
                ]),
                "urlRowSelector": new StringTypeAssertion(),
                "baseUrl": new OptionalAssertion(new StringTypeAssertion())
            });

            assertConfiguration = new SchemaAssertion({
                "options": assertOptionsConfiguration
            });

            assert.throws(function () {
                assertConfiguration.assert({
                    "options": {
                        "urlList": [
                            "http://example.com",
                            "http://acme.com", {}
                        ],
                        "urlRowSelector": ".job_offers tr:nth-child(n+2)",
                        "baseUrl": "http://example.com"
                    }
                });
            }, AssertionFailureException, "expected string or array (of string) but \"options.urlList\" got array");
        });
    });

    describe("#strict()", function () {
        var sa = new SchemaAssertion({
            "a": new NumberTypeAssertion(),
            "b": new StringTypeAssertion()
        }).strict();

        it("accepts exact same object", function () {
            sa.assert({
                "a": 1,
                "b": "string"
            });
        });

        it("fails on unexpected properties", function () {
            assert.throws(function () {
                sa.assert({
                    "a": 1,
                    "b": "string",
                    "c": "unexpected-property"
                });
            }, AssertionFailureException, "expected object (not including keys (array)[(string)\"c\"] and including keys (array)[(string)\"a\",(string)\"b\"]) and not array but got object");
        });

        it("ignores strict parameter when falsy value is given", function () {
            var sa1 = new SchemaAssertion({
                "a": new NumberTypeAssertion()
            }).strict(false);

            sa1.assert({
                "a": 1,
                "b": "unexpected-string"
            });
        });

        describe("#optional()", function () {
            var sa1 = new SchemaAssertion({
                "a": new NumberTypeAssertion().optional(),
                "b": new NumberTypeAssertion()
            }).strict(true);

            it("does not throw at optional fields in strict mode", function () {
                assert.doesNotThrow(function () {
                    sa1.assert({
                        "b": 2
                    });
                });
            });

            it("does not throw when object has optional fields", function () {
                assert.doesNotThrow(function () {
                    sa1.assert({
                        "a": 1,
                        "b": 2
                    });
                });
            });
        });
    });
});
