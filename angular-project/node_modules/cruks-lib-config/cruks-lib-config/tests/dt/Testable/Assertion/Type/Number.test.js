/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

/*global describe: false, it: false */

var assert = require("chai").assert,
    AssertionFailureException = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Exception/AssertionFailure"),
    NumberTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/Number");

describe("cruks-lib-config/Testable/Assertion/Type/Number", function () {
    describe("#assert()", function () {
        var ta = new NumberTypeAssertion();

        it("asserts that given item is a valid number", function () {
            assert.strictEqual(3, ta.assert(3));
        });

        it("fails when item is not a number", function () {
            assert.throws(function () {
                ta.assert("not-a-number");
            }, AssertionFailureException, "expected number but got (string)\"not-a-number\"");
        });

        it("does not accept Infinity", function () {
            assert.throws(function () {
                new NumberTypeAssertion().assert(Infinity);
            }, AssertionFailureException, "expected number but got (number)\"Infinity\"");
        });

        it("does not accept NaN", function () {
            assert.throws(function () {
                new NumberTypeAssertion().assert(NaN);
            }, AssertionFailureException, "expected number but got (number)\"NaN\"");
        });
    });

    describe("#default()", function () {
        var ta = (new NumberTypeAssertion()).default(1);

        it("checks edge case", function () {
            assert.strictEqual(0, new NumberTypeAssertion().default(3.5).assert(0));
        });

        it("picks input value", function () {
            assert.strictEqual(0, ta.assert(0));
        });

        it("picks default value", function () {
            assert.strictEqual(1, ta.assert());
        });
    });

    describe("#gt()", function () {
        var ta = (new NumberTypeAssertion()).gt(3);

        it("asserts that given number is greater than input value", function () {
            assert.strictEqual(4, ta.assert(4));
        });

        it("fails when item is lesser or equal input value", function () {
            assert.throws(function () {
                ta.assert(3);
            }, AssertionFailureException, "expected number (greater than (number)\"3\") but got (number)\"3\"");
        });
    });

    describe("#gt()", function () {
        describe("#lt()", function () {
            var ta = (new NumberTypeAssertion()).gt(3).lt(5);

            it("asserts that given number is inside the range", function () {
                assert.strictEqual(4, ta.assert(4));
            });

            it("fails when item is beyond the limits", function () {
                assert.throws(function () {
                    ta.assert(3);
                }, AssertionFailureException, "expected number (greater than (number)\"3\" and less than (number)\"5\") but got (number)\"3\"");

                assert.throws(function () {
                    ta.assert(5);
                }, AssertionFailureException, "expected number (greater than (number)\"3\" and less than (number)\"5\") but got (number)\"5\"");
            });
        });
    });

    describe("#lt()", function () {
        var ta = (new NumberTypeAssertion()).lt(3);

        it("asserts that given number is lower than input value", function () {
            assert.strictEqual(2, ta.assert(2));
        });

        it("fails when item is greater or equal input value", function () {
            assert.throws(function () {
                ta.assert(3);
            }, AssertionFailureException, "expected number (less than (number)\"3\") but got (number)\"3\"");
        });
    });

    describe("#gte()", function () {
        var ta = (new NumberTypeAssertion()).gte(3);

        it("asserts that given number is lower than input value", function () {
            assert.strictEqual(3, ta.assert(3));
            assert.strictEqual(4, ta.assert(4));
        });

        it("fails when item is lesser than input value", function () {
            assert.throws(function () {
                ta.assert(2);
            }, AssertionFailureException, "expected number (greater or equal (number)\"3\") but got (number)\"2\"");
        });
    });

    describe("#lte()", function () {
        var ta = (new NumberTypeAssertion()).lte(3);

        it("asserts that given number is lower than input value", function () {
            assert.strictEqual(2, ta.assert(2));
            assert.strictEqual(3, ta.assert(3));
        });

        it("fails when item is greater or equal input value", function () {
            assert.throws(function () {
                ta.assert(4);
            }, AssertionFailureException, "expected number (less or equal (number)\"3\") but got (number)\"4\"");
        });
    });

    describe("#range()", function () {
        var ta = (new NumberTypeAssertion()).range(7, 10);

        describe("#default()", function () {
            it("picks default value", function () {
                assert.strictEqual(7, new NumberTypeAssertion().range(0.5, 10).default(7).assert(null));
            });

            it("picks input value", function () {
                assert.strictEqual(8, new NumberTypeAssertion().range(0.5, 10).default(7).assert(8));
            });
        });

        it("asserts that given number is inside the range", function () {
            assert.strictEqual(7, ta.assert(7));
            assert.strictEqual(9, ta.assert(9));
            assert.strictEqual(10, ta.assert(10));
        });

        it("fails when item is beyond the limits", function () {
            assert.throws(function () {
                ta.assert(1);
            }, AssertionFailureException, "expected number (between (number)\"7\" and (number)\"10\") but got (number)\"1\"");

            assert.throws(function () {
                ta.assert(11);
            }, AssertionFailureException, "expected number (between (number)\"7\" and (number)\"10\") but got (number)\"11\"");
        });
    });
});
