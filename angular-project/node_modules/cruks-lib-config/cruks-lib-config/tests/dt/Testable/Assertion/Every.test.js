/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

/*global describe: false, it: false */

var assert = require("chai").assert,
    AssertionFailureException = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Exception/AssertionFailure"),
    EmptyAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Empty"),
    EveryAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Every"),
    NegatedAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Negated"),
    NumberTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/Number"),
    SchemaAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Schema"),
    StringTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/String");

describe("cruks-lib-config/Testable/Assertion/Every", function () {
    describe("#assert()", function () {
        var ea = new EveryAssertion([
            (new NumberTypeAssertion()).lt(10),
            (new NumberTypeAssertion()).gt(5)
        ]);

        it("asserts that every condition is fulfilled", function () {
            assert.strictEqual(7, ea.assert(7));
        });

        it("fails when any condition is failed", function () {
            assert.throws(function () {
                ea.assert(11);
            }, AssertionFailureException, "expected number (less than (number)\"10\") and number (greater than (number)\"5\") but got (number)\"11\"");

            assert.throws(function () {
                ea.assert(4);
            }, AssertionFailureException, "expected number (less than (number)\"10\") and number (greater than (number)\"5\") but got (number)\"4\"");
        });
    });

    describe("#default()", function () {
        it("picks default value", function () {
            assert.strictEqual("foo", new EveryAssertion([
                new NegatedAssertion(new EmptyAssertion()),
                new StringTypeAssertion()
            ]).default("foo").assert(null));
        });

        it("picks default value", function () {
            assert.deepEqual({
                "key1": "value_key1"
            }, new SchemaAssertion({
                    "key1": new EveryAssertion([
                        new NegatedAssertion(new EmptyAssertion()),
                        new StringTypeAssertion()
                    ]).default("value_key1")
                }).assert({}));
        });

        it("picks input value", function () {
            assert.strictEqual("bar", new EveryAssertion([
                new NegatedAssertion(new EmptyAssertion()),
                new StringTypeAssertion()
            ]).default("foo").assert("bar"));
        });

        it("picks input value", function () {
            assert.deepEqual({
                "key1": "value_key1_custom"
            }, new SchemaAssertion({
                    "key1": new EveryAssertion([
                        new NegatedAssertion(new EmptyAssertion()),
                        new StringTypeAssertion()
                    ]).default("value_key1")
                }).assert({
                    "key1": "value_key1_custom"
                }));
        });
    });
});
