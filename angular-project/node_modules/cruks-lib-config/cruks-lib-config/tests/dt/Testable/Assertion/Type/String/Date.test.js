/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

/*global describe: false, it: false */

var assert = require("chai").assert,
    AssertionFailureException = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Exception/AssertionFailure"),
    DateStringTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/String/Date");

describe("cruks-lib-config/Testable/Assertion/Date", function () {
    describe("#assert()", function () {
        it("accepts properly formatted date", function () {
            assert.strictEqual("2014-08-24T18:03:00", new DateStringTypeAssertion().assert("2014-08-24T18:03:00"));
        });

        it("fails on invalid value", function () {
            assert.throws(function () {
                new DateStringTypeAssertion().assert("9999-99-99");
            }, AssertionFailureException, "expected date but got (string)\"9999-99-99\"");
        });
    });

    describe("#format()", function () {
        it("accepts properly formatted date", function () {
            assert.strictEqual("12341212", new DateStringTypeAssertion().format("YYYYMMDD").assert("12341212"));
        });

        it("fails on invalid value", function () {
            assert.throws(function () {
                new DateStringTypeAssertion().format("YYYYMMDD").assert("9999-99-99");
            }, AssertionFailureException, "expected date (formatted as (string)\"YYYYMMDD\") but got (string)\"9999-99-99\"");
        });
    });

    describe("#matching()", function () {
        it("fails when date does not match regular expression", function () {
            assert.throws(function () {
                new DateStringTypeAssertion().format("YYYYMMDD").matching(/^1991/).assert("19900713");
            }, AssertionFailureException, "expected date (matching (regexp)\"/^1991/\" and formatted as (string)\"YYYYMMDD\") but got (string)\"19900713\"");
        });
    });
});
