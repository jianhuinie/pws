/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

/*eslint new-cap: 0 */
/*global describe: false, it: false */

var assert = require("chai").assert,
    AnythingAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Anything"),
    ArrayObjectTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/Object/Array"),
    AssertionFailureException = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Exception/AssertionFailure"),
    BooleanTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/Boolean"),
    ChildOfAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/ChildOf"),
    CustomAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Custom"),
    DateStringTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/String/Date"),
    EmptyAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Empty"),
    EnumAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Enum"),
    EveryAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Every"),
    ExactAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Exact"),
    FunctionTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/Function"),
    InstanceOfAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/InstanceOf"),
    IntegerNumberTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/Number/Integer"),
    KeyAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Key"),
    NegatedAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Negated"),
    NumberTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/Number"),
    ObjectTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/Object"),
    OptionalAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Optional"),
    PrimitiveTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/Primitive"),
    Reference = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Reference"),
    RegExpObjectTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/Object/RegExp"),
    SchemaAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Schema"),
    SomeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Some"),
    StringTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/String"),
    SymbolShim = require("polacks-shim-es6").Symbol,
    SymbolTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/Symbol"),
    TypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type");

describe("cruks-lib-config/Testable/Assertion/Negated", function () {
    describe("#assert()", function () {
        it("negates 'anything' assertion", function () {
            assert.throws(function () {
                new NegatedAssertion(new AnythingAssertion()).assert(5);
            }, AssertionFailureException, "expected nothing but got (number)\"5\"");
        });

        it("negates 'array' assertion", function () {
            assert.throws(function () {
                new NegatedAssertion(new ArrayObjectTypeAssertion()).assert([]);
            }, AssertionFailureException, "expected not array but got array");
        });

        it("negates 'boolean' assertion", function () {
            assert.throws(function () {
                new NegatedAssertion(new BooleanTypeAssertion()).assert(true);
            }, AssertionFailureException, "expected not boolean but got (boolean)\"true\"");
        });

        it("negates 'childOf' assertion", function () {
            assert.throws(function () {
                function Parent() {
                }

                function Child() {
                }
                Child.prototype = Object.create(Parent.prototype);

                new NegatedAssertion(new ChildOfAssertion(Parent)).assert(Child);
            }, AssertionFailureException, "expected not child of (function)\"Parent\" but got (function)\"Child\"");
        });

        it("negates 'custom' assertion", function () {
            assert.throws(function () {
                new NegatedAssertion(new CustomAssertion(function (item) {
                    return item;
                })).assert(4);
            }, AssertionFailureException, "expected something else but got (number)\"4\"");
        });

        it("negates 'date' assertion", function () {
            assert.throws(function () {
                new NegatedAssertion(new DateStringTypeAssertion()).assert("2014-08-24T18:25:57Z");
            }, AssertionFailureException, "expected date (not) but got (string)\"2014-08-24T18:25:57Z\"");
        });

        it("negates 'empty' assertion", function () {
            assert.throws(function () {
                new NegatedAssertion(new EmptyAssertion()).assert({});
            }, AssertionFailureException, "expected populated element but got object");
        });

        it("negates 'enum' assertion", function () {
            assert.throws(function () {
                new NegatedAssertion(new EnumAssertion([1])).assert(1);
            }, AssertionFailureException, "expected not member of (array)[(number)\"1\"] but got (number)\"1\"");
        });

        it("negates 'every' assertion", function () {
            assert.throws(function () {
                new NegatedAssertion(new EveryAssertion([
                    new AnythingAssertion(),
                    new NegatedAssertion(new EmptyAssertion())
                ])).assert(1);
            }, AssertionFailureException, "expected nothing and empty element but got (number)\"1\"");
        });

        it("negates 'exact' assertion", function () {
            assert.throws(function () {
                new NegatedAssertion(new ExactAssertion(1)).assert(1);
            }, AssertionFailureException, "expected not (number)\"1\" but got (number)\"1\"");
        });

        it("negates 'function' assertion", function () {
            assert.throws(function () {
                new NegatedAssertion(new FunctionTypeAssertion()).assert(function () {});
            }, AssertionFailureException, "expected not function but got function");
        });

        it("negates 'instanceOf' assertion", function () {
            function Parent() {
            }

            assert.throws(function () {
                new NegatedAssertion(new InstanceOfAssertion(Parent)).assert(new Parent());
            }, AssertionFailureException, "expected not instance of (function)\"Parent\" but got object");
        });

        it("negates 'integer' assertion", function () {
            assert.throws(function () {
                new NegatedAssertion(new IntegerNumberTypeAssertion()).assert(5);
            }, AssertionFailureException, "expected not integer but got (number)\"5\"");
        });

        it("negates 'key' assertion", function () {
            assert.throws(function () {
                new NegatedAssertion(new KeyAssertion()).assert(1);
            }, AssertionFailureException, "expected not symbol nor primitive type but got (number)\"1\"");
        });

        it("negates 'number' assertion", function () {
            assert.throws(function () {
                new NegatedAssertion(new NumberTypeAssertion()).assert(5);
            }, AssertionFailureException, "expected not number but got (number)\"5\"");
        });

        it("negates 'object' assertion", function () {
            assert.throws(function () {
                new NegatedAssertion(new ObjectTypeAssertion()).assert({});
            }, AssertionFailureException, "expected not object but got object");
        });

        it("negates 'optional' assertion", function () {
            assert.throws(function () {
                new NegatedAssertion(new OptionalAssertion(new AnythingAssertion())).assert(1);
            }, AssertionFailureException, "expected obligatory nothing but got (number)\"1\"");
        });

        it("negates 'primitive' assertion", function () {
            assert.throws(function () {
                new NegatedAssertion(new PrimitiveTypeAssertion()).assert(1);
            }, AssertionFailureException, "expected not primitive type but got (number)\"1\"");
        });

        it("negates reference", function () {
            assert.throws(function () {
                new NegatedAssertion(new Reference("foo")).assert({
                    "foo": 5
                });
            }, AssertionFailureException, "expected missing reference to (string)\"foo\" but got object");
        });

        it("negates 'regexp' assertion", function () {
            assert.throws(function () {
                new NegatedAssertion(new RegExpObjectTypeAssertion()).assert(/foo/);
            }, AssertionFailureException, "expected not regular expression but got (regexp)\"/foo/\"");
        });

        it("negates 'schema' assertion", function () {
            var schemaAssertion = new SchemaAssertion({
                "foo": new ExactAssertion(5)
            });

            assert.throws(function () {
                new NegatedAssertion(schemaAssertion).assert({
                    "foo": 5
                });
            }, AssertionFailureException, "expected not schema but got object");
        });

        it("negates 'some' assertion", function () {
            assert.throws(function () {
                new NegatedAssertion(new SomeAssertion([
                    new AnythingAssertion(),
                    new NegatedAssertion(new EmptyAssertion())
                ])).assert(1);
            }, AssertionFailureException, "expected nothing nor populated element but got (number)\"1\"");
        });

        it("negates 'string' assertion", function () {
            assert.throws(function () {
                new NegatedAssertion(new StringTypeAssertion()).assert("test");
            }, AssertionFailureException, "expected not string but got (string)\"test\"");
        });

        it("negates 'symbol' assertion", function () {
            assert.throws(function () {
                new NegatedAssertion(new SymbolTypeAssertion()).assert(SymbolShim());
            }, AssertionFailureException, "expected not symbol but got [[Symbol]]");
        });

        it("negates 'type' assertion", function () {
            assert.throws(function () {
                new NegatedAssertion(new TypeAssertion("number")).assert(1);
            }, AssertionFailureException, "expected not number but got (number)\"1\"");
        });
    });
});
