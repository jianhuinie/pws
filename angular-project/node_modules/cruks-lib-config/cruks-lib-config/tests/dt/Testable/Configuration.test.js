/**
 * @license Copyright (c) 2013, CKSource - Frederico Knabben
 * @license Copyright (c) 2013-2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

/*global describe: false, it: false */

var assert = require("chai").assert,
    AssertionFailureException = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Exception/AssertionFailure"),
    Configuration = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Configuration"),
    expect = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/expect");

describe("cruks-lib-config/Configuration", function () {
    describe("#data", function () {
        var config;

        config = new Configuration().update({
            "a": {
                "b": {
                    "c": 1
                }
            },
            "d": 2
        });

        assert.strictEqual(1, config.data.a.b.c);
        assert.strictEqual(2, config.data.d);

        it("allows changing existing confiuration options", function () {
            config.data.a.b.c = 2;
        });
    });

    describe("#expect", function () {
        describe("#configuration()", function () {
            function TestConfig1() {
                Configuration.call(this);
            }
            TestConfig1.prototype = Object.create(Configuration.prototype);
            TestConfig1.prototype.expect = function () {
                return expect.every([
                    expect.empty(),
                    expect.string()
                ]);
            };

            function TestConfig2() {
                Configuration.call(this);
            }
            TestConfig2.prototype = Object.create(Configuration.prototype);
            TestConfig2.prototype.expect = function () {
                return expect.map(new TestConfig1());
            };

            it("allows configuration embedding", function () {
                var input,
                    testConfig2;

                input = {
                    "testKey1": "",
                    "testKey2": ""
                };
                testConfig2 = new TestConfig2().update(input);

                assert.deepEqual(input, testConfig2.data);
            });

            it("fails on invalid embedded configuration", function () {
                assert.throws(function () {
                    /*eslint no-new: 0 */

                    new TestConfig2().update({
                        "test": "not-an-empty-string"
                    });
                }, AssertionFailureException, "expected empty element and string but \"test\" got (string)\"not-an-empty-string\"");
            });
        });

        it("allows empty configuration", function () {
            var config = new Configuration().update();

            assert.ok(!config.data);
        });

        it("passess all configuration values to Configuration object", function () {
            var config = new Configuration().update({
                "hello": "world"
            });

            assert.equal(config.data.hello, "world");
        });

        it("validates configuration instantly against a schema", function () {
            function TestConfig() {
                Configuration.call(this);
            }
            TestConfig.prototype = Object.create(Configuration.prototype);

            TestConfig.prototype.expect = function () {
                return expect.schema({
                    "hello": expect.string().default("world")
                });
            };

            assert.throws(function () {
                /*eslint no-new: 0 */

                new TestConfig().update({
                    "hello": 123
                });
            }, AssertionFailureException, "expected string but \"hello\" got (number)\"123\"");
        });
    });

    describe("#update()", function () {
        it("validates configuration against a schema", function () {
            var config = new Configuration();

            config.expect = function () {
                return expect.schema({
                    "hello": expect.string().default("world")
                });
            };

            assert.throws(function () {
                config.update({
                    "hello": 123
                });
            }, AssertionFailureException, "expected string but \"hello\" got (number)\"123\"");
        });

        it("removes previous configuration", function () {
            var config = new Configuration().update({
                "hello": 123
            });

            assert.strictEqual(config.data.hello, 123);

            config.update({
                "world": 456
            });

            assert.ok(!config.data.hello);
            assert.strictEqual(config.data.world, 456);
        });
    });
});
