/**
 * @license Copyright (c) 2013, CKSource - Frederico Knabben
 * @license Copyright (c) 2013-2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

/*global describe: false, it: false */

var assert = require("chai").assert,
    AssertionFailureException = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Exception/AssertionFailure"),
    Settings = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Settings"),
    SchemaAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Schema"),
    StringTypeAssertion = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Assertion/Type/String");

describe("cruks-lib-config/Settings", function () {
    it("passess all configuration values to Settings object", function () {
        var settings;

        settings = new Settings({
            "hello": "world"
        });

        assert.equal(settings.hello, "world");
    });

    describe("#update", function () {
        it("validates configuration against a schema", function () {
            var settings;

            settings = new Settings();
            settings.expect = function () {
                return new SchemaAssertion({
                        "hello": new StringTypeAssertion()
                    });
            };

            assert.throws(function () {
                settings.update({
                    "hello": 123
                });
            }, AssertionFailureException, "expected string but \"hello\" got (number)\"123\"");
        });

        it("removes previous configuration", function () {
            var settings;

            settings = new Settings({
                "hello": 123
            });

            settings.update({
                "world": 456
            });

            assert.ok(!settings.hello);
            assert.strictEqual(settings.world, 456);
        });
    });
});
