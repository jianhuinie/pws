/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

/*global describe: false, it: false */

var assert = require("chai").assert,
    expect = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/expect"),
    // Reference = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Reference"),
    Settings = require(process.env.PACKAGE_ROOT + "/cruks-lib-config/Testable/Settings");

describe("input not normalized recursively", function () {
    function MySettings(options) {
        Settings.call(this, options);
    }
    MySettings.prototype = Object.create(Settings.prototype);

    MySettings.prototype.expect = function () {
        return expect.schema({
            "initial": this.expectInitial().optional()
        }).strict(true);
    };

    MySettings.prototype.expectInitial = function () {
        var that = this;

        return expect.some([
            expect.schema({
                "defer": expect.boolean().default(true),
                "state": expect.string()
            }),
            expect.string().normalize(function (input, verbosity, tracker) {
                var normalized = {
                    "state": input
                };

                return that.expectInitial().assert(normalized, verbosity, tracker);
            })
        ]);
    };

    it("normalizes input recursively", function () {
        var s = new MySettings({
            "initial": "foo"
        });

        assert.deepEqual({
            "defer": true,
            "state": "foo"
        }, s.initial);
    });
});
