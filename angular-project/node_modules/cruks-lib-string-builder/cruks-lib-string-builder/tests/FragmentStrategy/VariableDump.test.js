/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

/* global describe: false, it: false */

var assert = require("assert"),
    SymbolShim = require("polacks-shim-es6").Symbol,
    VariableDumpFragmentStrategy = require(global.paths.root + "/cruks-lib-string-builder/FragmentStrategy/VariableDump"),
    VerbosityIndicator = require("cruks-lib-verbosity-indicator").VerbosityIndicator;

describe("cruks-lib-string-builder/StringBuilder", function () {
    describe("#toString()", function () {
        var o = {
                "a": {
                    "b": {
                        "c": {
                            "d": {
                                "e": {
                                    "f": {
                                        "g": "h"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            arr = [1, "test", o, false];

        describe("dumps 'array'", function () {
            it("uses quiet verbosity", function () {
                var vd = new VariableDumpFragmentStrategy(arr, VerbosityIndicator.VERBOSITY_QUIET);

                assert.strictEqual("", vd.toString());
            });

            it("uses normal verbosity", function () {
                var vd = new VariableDumpFragmentStrategy(arr);

                assert.strictEqual("array", vd.toString());
            });

            it("uses verbose verbosity", function () {
                var vd = new VariableDumpFragmentStrategy(arr, VerbosityIndicator.VERBOSITY_VERBOSE);

                assert.strictEqual("(array)[(number)\"1\",(string)\"test\",object,(boolean)\"false\"]", vd.toString());
            });

            it("uses very verbose verbosity", function () {
                var vd = new VariableDumpFragmentStrategy(arr, VerbosityIndicator.VERBOSITY_VERY_VERBOSE);

                assert.strictEqual("(array)[(number)\"1\",(string)\"test\",(object)\"{ a: { b: { c: [Object] } } }\",(boolean)\"false\"]", vd.toString());
            });

            it("uses debug verbosity", function () {
                var vd = new VariableDumpFragmentStrategy(arr, VerbosityIndicator.VERBOSITY_DEBUG);

                assert.strictEqual("(array)[(number)\"1\",(string)\"test\",(object)\"{ a: { b: { c: { d: { e: { f: { g: 'h' } } } } } } }\",(boolean)\"false\"]", vd.toString());
            });
        });

        describe("dumps 'boolean'", function () {
            it("uses 'true'", function () {
                var vd = new VariableDumpFragmentStrategy(true);

                assert.strictEqual("(boolean)\"true\"", vd.toString());
            });

            it("uses 'false'", function () {
                var vd = new VariableDumpFragmentStrategy(false);

                assert.strictEqual("(boolean)\"false\"", vd.toString());
            });
        });

        describe("dumps 'function'", function () {
            it("uses anonymous", function () {
                var vd = new VariableDumpFragmentStrategy(function () {});

                assert.strictEqual("function", vd.toString());
            });

            it("uses named", function () {
                var vd = new VariableDumpFragmentStrategy(function test() {});

                assert.strictEqual("(function)\"test\"", vd.toString());
            });
        });

        it("dumps 'null'", function () {
            var vd = new VariableDumpFragmentStrategy(null);

            assert.strictEqual("(object)\"null\"", vd.toString());
        });

        it("dumps 'number'", function () {
            var vd = new VariableDumpFragmentStrategy(42.5);

            assert.strictEqual("(number)\"42.5\"", vd.toString());
        });

        describe("dumps 'object'", function () {
            it("uses quiet verbosity", function () {
                var vd = new VariableDumpFragmentStrategy(o, VerbosityIndicator.VERBOSITY_QUIET);

                assert.strictEqual("", vd.toString());
            });

            it("uses normal verbosity", function () {
                var vd = new VariableDumpFragmentStrategy(o);

                assert.strictEqual("object", vd.toString());
            });

            it("uses verbose verbosity", function () {
                var vd = new VariableDumpFragmentStrategy(o, VerbosityIndicator.VERBOSITY_VERBOSE);

                assert.strictEqual("(object)\"{ a: { b: { c: [Object] } } }\"", vd.toString());
            });

            it("uses very verbose verbosity", function () {
                var vd = new VariableDumpFragmentStrategy(o, VerbosityIndicator.VERBOSITY_VERY_VERBOSE);

                assert.strictEqual("(object)\"{ a: { b: { c: { d: { e: { f: { g: 'h' } } } } } } }\"", vd.toString());
            });

            it("uses debug verbosity", function () {
                var vd = new VariableDumpFragmentStrategy(o, VerbosityIndicator.VERBOSITY_DEBUG);

                assert.strictEqual("(object)\"{ a: { b: { c: { d: { e: { f: { g: 'h' } } } } } } }\"", vd.toString());
            });
        });

        it("dumps 'regexp'", function () {
            var vd = new VariableDumpFragmentStrategy(/^life$/);

            assert.strictEqual("(regexp)\"/^life$/\"", vd.toString());
        });

        it("dumps 'string'", function () {
            var vd = new VariableDumpFragmentStrategy("test");

            assert.strictEqual("(string)\"test\"", vd.toString());
        });

        it("dumps 'symbol'", function () {
            var vd = new VariableDumpFragmentStrategy(SymbolShim());

            assert.strictEqual("[[Symbol]]", vd.toString());
        });

        it("dumps 'undefined'", function () {
            var vd = new VariableDumpFragmentStrategy();

            assert.strictEqual("undefined", vd.toString());
        });
    });
});
