/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

var path = require("path"),
    FormatFragmentStrategy = require(path.join(__dirname, "/FragmentStrategy/Format")),
    Fragment = require(path.join(__dirname, "/Fragment")),
    VariableDumpFragmentStrategy = require(path.join(__dirname, "/FragmentStrategy/VariableDump")),
    VerbosityIndicator = require("cruks-lib-verbosity-indicator").VerbosityIndicator;

/**
 * @constructor
 * @param {String} [separator] space (" ") by default
 * @param {cruks-lib-string-builder/VerbosityIndicator} [verbosity] normal by default
 */
function StringBuilder(separator, verbosity) {
    this.emptySeparator = "";
    this.separator = separator || this.emptySeparator;
    this.fragments = [];
    this.verbosity = new VerbosityIndicator(verbosity);
}

/**
 * @param {String} fragment message fragment
 * @param {String} [separator] fragment separator
 * @returns {cruks-lib-string-builder/StringBuilder} chained object
 */
StringBuilder.prototype.append = function (fragment, separator) {
    this.fragments.push(new Fragment(fragment, this.pickSeparator(separator), this.verbosity));

    return this;
};

/**
 * @param {Array} collection list of variables to be appended individually
 * @param {String} [separator] fragment separator
 * @returns {cruks-lib-string-builder/StringBuilder} chained object
 */
StringBuilder.prototype.appendCollection = function (collection, separator) {
    collection.forEach(function (item) {
        this.append(item, separator);
    }, this);

    return this;
};

/**
 * @param {String} fragment message fragment
 * @param {Array} format list of variables to be used as string formatters
 * @param {String} [separator] fragment separator
 * @returns {cruks-lib-string-builder/StringBuilder} chained object
 */
StringBuilder.prototype.appendFormat = function (fragment, format, separator) {
    return this.append(new FormatFragmentStrategy(fragment, format), separator);
};

/**
 * @param {String} fragment message fragment
 * @param {String} [separator] fragment separator
 * @returns {cruks-lib-string-builder/StringBuilder} chained object
 */
StringBuilder.prototype.appendDump = function (fragment, separator) {
    return this.append(new VariableDumpFragmentStrategy(fragment, this.verbosity), separator);
};

/**
 * @param {Array} format variables to format ready string
 * @returns {String} formatted string
 */
StringBuilder.prototype.format = function (format) {
    return new FormatFragmentStrategy(this.toString(), format).toString();
};

/**
 * @returns {Boolean} true if message is empty, false otherwise
 */
StringBuilder.prototype.isEmpty = function () {
    return this.fragments.length < 1;
};

/**
 * @param {String} [separator] fragment separator
 * @returns {String} separator for current fragment
 */
StringBuilder.prototype.pickSeparator = function (separator) {
    if (this.isEmpty()) {
        return this.emptySeparator;
    }

    return separator || this.separator;
};

/**
 * @returns {String} formatted message
 */
StringBuilder.prototype.toString = function () {
    if (this.verbosity.isQuiet()) {
        return "";
    }

    return this.fragments.join("");
};

/**
 * Modifies last fragment.
 *
 * @param {Function} [updater] update callback
 * @returns {cruks-lib-string-builder/StringBuilder} chained object
 * @throws {Error} if string builder is empty
 */
StringBuilder.prototype.update = function (updater) {
    var last;

    if (this.isEmpty()) {
        throw new Error("String builder is empty. There is nothing to update.");
    }

    last = this.fragments.pop();
    updater(last);
    this.fragments.push(last);

    return this;
};

/**
 * Some sugar for updating verbosity at last fragment.
 *
 * @param {cruks-lib-string-builder/VerbosityIndicator} verbosity new verbosity
 * @returns {cruks-lib-string-builder/StringBuilder} chained object
 * @throws {Error} if string builder is empty
 */
StringBuilder.prototype.updateVerbosity = function (verbosity) {
    return this.update(function (fragment) {
        fragment.strategy.verbosity = verbosity;
    });
};

module.exports = StringBuilder;
