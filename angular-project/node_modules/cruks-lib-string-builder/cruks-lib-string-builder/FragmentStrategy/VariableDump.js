/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

var path = require("path"),
    util = require("util"),
    FragmentStrategy = require(path.join(__dirname, "/../FragmentStrategy")),
    SymbolShim = require("polacks-shim-es6").Symbol;

/**
 * @auguments cruks-lib-string-builder/FragmentStrategy
 * @constructor
 * @param {*} item element to be dumped
 * @param {cruks-lib-string-builder/VerbosityIndicator} [verbosity] normal by default
 */
function VariableDump(item, verbosity) {
    FragmentStrategy.call(this, item, verbosity);
}
VariableDump.prototype = Object.create(FragmentStrategy.prototype);

/**
 * @param {*} item item to be dumped
 * @param {String} type item type
 * @param {cruks-lib-string-builder/VerbosityIndicator} [verbosity] normal by default
 * @param {String} dump string representation of input item
 * @returns {String} decaorated item dump
 */
VariableDump.prototype.decorate = function (item, type, verbosity, dump) {
    var decoratedType;

    if (arguments.length < 4) {
        return type;
    }

    decoratedType = this.decorateType(type, verbosity);

    if ("array" === type) {
        return decoratedType + this.decorateArray(dump, verbosity);
    }

    return decoratedType + "\"" + dump + "\"";
};

/**
 * @param {String} dump string representation of input item
 * @param {cruks-lib-string-builder/VerbosityIndicator} [verbosity] normal by default
 * @returns {String} decaorated item dump
 */
VariableDump.prototype.decorateArray = function (dump /*, verbosity*/ ) {
    return "[" + dump + "]";
};

/**
 * @param {String} type item type
 * @param {cruks-lib-string-builder/VerbosityIndicator} [verbosity] normal by default
 * @returns {String} decaorated item dump
 */
VariableDump.prototype.decorateType = function (type /*, verbosity*/ ) {
    return "(" + type + ")";
};

/**
 * @param {*} item item to be dumped
 * @param {String} type item type
 * @param {cruks-lib-string-builder/VerbosityIndicator} [verbosity] normal by default
 * @returns {String} decaorated item dump
 */
VariableDump.prototype.dumpArray = function (item, type, verbosity) {
    if (verbosity.isVerbose()) {
        return this.decorate(item, "array", verbosity, item.map(function (arrayItem) {
            return new VariableDump(arrayItem, verbosity.createSmaller()).toString();
        }));
    }

    return this.decorate(item, "array", verbosity);
};

/**
 * @param {*} item item to be dumped
 * @param {String} type item type
 * @param {cruks-lib-string-builder/VerbosityIndicator} [verbosity] normal by default
 * @returns {String} decaorated item dump
 */
VariableDump.prototype.dumpFunction = function (item, type, verbosity) {
    if (item.name) {
        return this.decorate(item, type, verbosity, item.name);
    }

    return this.decorate(item, type, verbosity);
};

/**
 * @param {*} item item to be dumped
 * @param {String} type item type
 * @param {cruks-lib-string-builder/VerbosityIndicator} [verbosity] normal by default
 * @returns {String} decaorated item dump
 */
VariableDump.prototype.dumpObject = function (item, type, verbosity) {
    if (Array.isArray(item)) {
        return this.dumpArray(item, type, verbosity);
    }
    if (item instanceof RegExp) {
        return this.decorate(item, "regexp", verbosity, item.toString());
    }
    if (item instanceof SymbolShim) {
        return this.dumpObjectSymbol(item, type, verbosity, item.toString());
    }
    if (null === item) {
        return this.decorate(item, type, verbosity, "null");
    }

    return this.dumpObjectPlain(item, "object", verbosity);
};

/**
 * @param {*} item item to be dumped
 * @param {String} type item type
 * @param {cruks-lib-string-builder/VerbosityIndicator} [verbosity] normal by default
 * @returns {String} decaorated item dump
 */
VariableDump.prototype.dumpObjectPlain = function (item, type, verbosity) {
    // 2 is default object inspect depth as of node 0.11
    var depth = 2;

    if (verbosity.isVerbose()) {
        if (verbosity.isVeryVerbose()) {
            // null means infinite deep
            depth = null;
        }

        return this.decorate(item, type, verbosity, util.inspect(item, {
            "depth": depth
        }));
    }

    return this.decorate(item, type, verbosity);
};

/**
 * @param {*} item item to be dumped
 * @param {String} type item type
 * @param {cruks-lib-string-builder/VerbosityIndicator} [verbosity] normal by default
 * @returns {String} decaorated item dump
 */
VariableDump.prototype.dumpObjectSymbol = function (item, type, verbosity) {
    return this.decorate(item, "[[Symbol]]", verbosity);
};

/**
 * @param {*} item item to be dumped
 * @param {String} type item type
 * @param {cruks-lib-string-builder/VerbosityIndicator} [verbosity] normal by default
 * @returns {String} decaorated item dump
 */
VariableDump.prototype.dumpUndefined = function (item, type, verbosity) {
    return this.decorate(item, type, verbosity);
};

/**
 * @returns {String} string representation of encapsulated item
 */
VariableDump.prototype.toString = function () {
    var type;

    if (this.verbosity.isQuiet()) {
        return "";
    }

    type = typeof this.fragment;

    if ("function" === type) {
        return this.dumpFunction(this.fragment, type, this.verbosity);
    }
    if ("object" === type) {
        return this.dumpObject(this.fragment, type, this.verbosity);
    }
    if ("symbol" === type) {
        return this.dumpObjectSymbol(this.fragment, type, this.verbosity);
    }
    if ("undefined" === type) {
        return this.dumpUndefined(this.fragment, type, this.verbosity);
    }

    return this.decorate(this.fragment, type, this.verbosity, this.fragment);
};

module.exports = VariableDump;
