/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

/* global describe: false, it: false */

var assert = require("chai").assert,
    TraverseSnapshot = require(global.paths.root + "/cruks-lib-traverse-tracker/TraverseSnapshot"),
    TraverseTracker = require(global.paths.root + "/cruks-lib-traverse-tracker/TraverseTracker");

describe("cruks-lib-traverse-tracker/TraverseTracker", function () {
    describe("#fork()", function () {
        it("allows forking tracker without step name", function () {
            var tt1 = new TraverseTracker(),
                tt2,
                ts = new TraverseSnapshot();

            tt1.snapshot(ts);

            tt2 = tt1.fork();

            assert.deepEqual([ts], tt2.snapshots);
        });
    });

    describe("#next()", function () {
        var tt = new TraverseTracker();

        it("invoke function at closest step", function () {
            tt = tt.fork("a");

            tt.next(function (tracker) {
                var step = tracker.steps.pop();

                step = step.toUpperCase();
                tracker.steps.push(step);

                return tracker;
            });

            tt = tt.fork("b");
            tt = tt.fork("c");

            assert.deepEqual(["a", "B", "c"], tt.steps);
        });
    });

    describe("#snapshot()", function () {
        var s1 = new TraverseSnapshot(),
            s2 = new TraverseSnapshot(),
            s3 = new TraverseSnapshot();

        it("keeps snapshot history", function () {
            var tt = new TraverseTracker();

            tt.snapshot(s1);
            tt.snapshot(s2);
            tt.snapshot(s3);

            assert.deepEqual([s1, s2, s3], tt.snapshots);
        });

        it("keeps snapshot history at forked elements", function () {
            var tt1 = new TraverseTracker(),
                tt2;

            tt1.snapshot(s1);

            tt2 = tt1.fork("a");

            tt1.snapshot(s2);
            tt2.snapshot(s3);

            assert.deepEqual([s1, s2], tt1.snapshots);
            assert.deepEqual([s1, s3], tt2.snapshots);
        });
    });

    describe("#steps", function () {
        var tt = new TraverseTracker();

        it("keeps track of forking steps", function () {
            tt = tt.fork("a");
            tt = tt.fork("b");
            tt = tt.fork("c");

            assert.deepEqual(["a", "b", "c"], tt.steps);
        });
    });
});
