/**
 * @license Copyright (c) 2014, Cruks
 * For licensing, see LICENSE
 */

"use strict";

var assert = require("chai").assert,
    path = require("path"),
    TraverseSnapshot = require(path.join(__dirname, "/TraverseSnapshot"));

/**
 * @constructor
 */
function TraverseTracker() {
    this.snapshots = [];
    this.steps = [];
}

/**
 * @param {String} property name of forked tracker
 * @returns {cruks-lib-traverse-tracker/TraverseTracker} new instance of traverse tracker
 */
TraverseTracker.prototype.fork = function (property) {
    var forked = new TraverseTracker();

    forked.snapshots = this.snapshots.slice();
    forked.steps = this.steps.slice();

    forked.step(property);

    if (this.stepMapper) {
        this.stepMapper(forked);
    }

    return forked;
};

/**
 * @param {Function} mapper closest step mapper
 * @returns {cruks-lib-traverse-tracker/TraverseTracker} chained tracker instance
 */
TraverseTracker.prototype.next = function (mapper) {
    this.stepMapper = mapper;

    return this;
};

/**
 * @param {cruks-lib-traverse-tracker/TraverseSnapshot} snapshot data object
 * @returns {cruks-lib-traverse-tracker/TraverseTracker} chained tracker instance
 */
TraverseTracker.prototype.snapshot = function (snapshot) {
    assert.instanceOf(snapshot, TraverseSnapshot);

    this.snapshots.push(snapshot);

    return this;
};

/**
 * @param {String} step name of step to be forked
 * @returns {cruks-lib-traverse-tracker/TraverseTracker} chained tracker instance
 */
TraverseTracker.prototype.step = function (step) {
    this.steps.push(step);

    return this;
};

module.exports = TraverseTracker;
